nbmodel <- naiveBayes(as.formula(ff),data=dtrain)
dtrain$nbpred <- predict(nbmodel,newdata=dtrain,type='raw')[,'TRUE']
load("C:/Users/user/Downloads/psub.RData")
psub
library(MASS)
load('psub.RData')
str(psub)
dtrain <- subset(psub,ORIGRANDGROUP>=500)
dtest <- subset(psub,ORIGRANDGROUP<500)
model <- lm(log10(PINCP)~AGEP+SEX+COW+SCHL, data=dtrain)
summary(model)
dtrain$predLogPINCP <- predict(model,data=dtrain)
dtest$predLogPINCP <- predict(model,dtest)
dim(psub)
dim(dtest)
ggplot(dtest,aes(x=LogPINCP,y=PINCP))+
geom_line(alpha=0.2)+
geom_smooth()
library(ggplot2)
ggplot(dtest,aes(x=LogPINCP,y=PINCP))+
geom_line(alpha=0.2)+
geom_smooth()
ggplot(dtest,aes(x=predLogPINCP,y=PINCP))+
geom_line(alpha=0.2)+
geom_smooth()
ggplot(dtest,aes(x=predLogPINCP,y=PINCP))+
geom_point(alpha=0.2)+
geom_smooth()
ggplot(dtest,aes(x=predLogPINCP,y=PINCP))+
geom_point(alpha=0.2)+
geom_smooth()+
geom_line()
ggplot(dtest,aes(x=predLogPINCP,y=PINCP))+
geom_point(alpha=0.2)+
geom_smooth()+
geom_line(aes(x=predLogPINCP,y=log10(PINCP)))
ggplot(dtest,aes(x=predLogPINCP,y=PINCP))+
geom_point(alpha=0.2)+
geom_smooth(color='black')+
geom_line(aes(x=predLogPINCP,y=log10(PINCP)),linetype=2,color='blue')
ggplot(dtest,aes(x=predLogPINCP,y=log(PINCP)))+
geom_point(alpha=0.2)+
geom_smooth(color='black')+
geom_line(aes(x=predLogPINCP,y=log10(PINCP)),linetype=2,color='blue')
ggplot(dtest,aes(x=predLogPINCP,y=log10(PINCP)))+
geom_point(alpha=0.2)+
geom_smooth(color='black')+
geom_line(aes(x=predLogPINCP,y=log10(PINCP)),linetype=2,color='blue')
ggplot(dtest,aes(x=predLogPINCP,y=log10(PINCP)))+
geom_point(alpha=0.2)+
geom_smooth(color='black')+
geom_line(aes(x=PINCP,y=log10(PINCP)),linetype=2,color='blue')
ggplot(dtest,aes(x=predLogPINCP,y=log10(PINCP)))+
geom_point(alpha=0.2)+
geom_smooth(color='black')+
geom_line(aes(x=log10(PINCP),y=log10(PINCP)),linetype=2,color='blue')
ggplot(dtest,aes(x=predLogPINCP,y=log10(PINCP)))+
geom_point(alpha=0.2)+
geom_smooth(color='black')+
geom_line(aes(x=log10(PINCP),y=log10(PINCP)),linetype=2,color='blue')+
scale_x_continuous(limits = c(4,5.5))+
scale_y_continuous(limits = c(4,5.5))
ggplot(dtest,aes(x=predLogPINCP,y=log10(PINCP)))+
geom_point(alpha=0.2)+
geom_smooth(color='black')+
geom_line(aes(x=log10(PINCP),y=log10(PINCP)),linetype=2,color='blue')+
scale_x_continuous(limits = c(4.2,5))+
scale_y_continuous(limits = c(4,5.5))
ggplot(dtest,aes(x=predLogPINCP,y=(predLogPINCP-log10(PINCP))))+
geom_point()
ggplot(dtest,aes(x=predLogPINCP,y=(predLogPINCP-log10(PINCP))))+
geom_point()+
geom_smooth()
rsq <- function(y,f){
1-(sum((y-f)^2)/sum((y-mean)^2))
}
train_rsq <- rsq(log10(dtrain$PINCP),predict(model,dtrain))
1-(sum((y-f)^2)/sum((y-mean(y))^2))
rsq <- function(y,f){
1-(sum((y-f)^2)/sum((y-mean(y))^2))
}
train_rsq <- rsq(log10(dtrain$PINCP),predict(model,dtrain))
train_rsq
rsq(log10(dtest$PINCP),predict(model,dtest))
rsq(log10(dcal$PINCP),predict(model,dcal))
rmse <- function(y,f){
sqrt(mean((y-f)^2))
}
rmse(log10(dtrain$PINCP),predict(model,dtrain))
rmse(log10(dtest$PINCP),predict(model,dtest))
summary(model)
summary(log10(dtrain$PINCP)-predict(model,dtrain))
summary(log10(dtest$PINCP)-predict(model,dtest))
DOF <- dim(dtrian)[[1]]-coefficients(model)
DOF <- dim(dtrain)[[1]]-coefficients(model)
DOF
dim(coefficients(model))
DOF <- dim(dtrain)[[1]]-dim(summary(model)$coefficient)
DOF
dim(summary(model)$coefficient)
DOF <- dim(dtrain)[[1]]-dim(summary(model)$coefficient)[[1]]
DOF
summary(model)
residuals(model)
Residual_SE <- sqrt(sum(residuals(model)^2)/df)
Residual_SE <- sqrt(sum(residuals(model)^2)/DOF)
Residual_SE
library(ggplot2)
load("NatalRiskData.rData")
str(sdata)
dtrain=sdata[ORIGRANDGROUP<=5,]
dtrain=sdata[sdata$ORIGRANDGROUP<=5,]
dtest=sdata[sdata$ORIGRANDGROUP>5,]
str(dtrain)
complications <- c("ULD_MECO","ULD_PRECIP","ULD_BREECH")
riskfactors <- c("URF_DIAB", "URF_CHYPER", "URF_PHYPER", "URF_ECLAM")
y <- "atRisk"
x <- c("PWGT","UPREVIS", "CIG_REC","GESTREC3", "DPLURAL",complications,riskfactors)
fml <- paste(y,paste(x,collapse='+'),separate='~')
fml
fml <- paste(y,paste(x,collapse='+'),sep='~')
fml
model=glm(fml,dtrain,family = binomial(link='logit'))
dtrain$pred <- predict(model,dtrain)
dtest$pred <- predict(model,dtest,type = 'response')
# type='response' to get the values in the probabilities otherwise the values will be logits
dtrain$pred <- predict(model,dtrain,type='response')
dtest$pred <- predict(model,dtest,type = 'response')
ggplot(dtrain,aes(x=pred,color=atRisk,linetype=atRisk))+
geom_density()
library(grid)
library(ROCR)
predobj <- prediction(dtrain$pred,dtrain$atRisk)
predobj
prec.onj <- performance(predobj,measure='prec')
prec.obj <- performance(predobj,measure='prec')
prec.obj
rec.obj <- performance(predobj,measure = 'rec')
prec.obj@y.values
prec.obj@y.values[[1]]
(prec.obj@y.values)[[1]]
precision <- prec.obj@y.values[[1]]
recall <- rec.obj@y.vaues[[1]]
recall <- rec.obj@y.values[[1]]
rec.obj@y.values[[1]]
prec.x
prec.x <- prec.obj@x.values
prec.obj@x.values
prec.x <- prec.obj@x.values[[1]]
rocframe <- data.frame(threshold=prec.x,precision=precision,recall=recall)
str(rocframe)
pnull <- mean(as.numeric(dtrain$atRisk))
pnull
# enrichment vs threshold lot
p1 <- plot(rocframe,aes(x=threshold,y=precision/pnull))+
geom_line()
# enrichment vs threshold lot
p1 <- plot(rocframe,aes(x=threshold,y=precision/pnull))+
geom_line()+
coord_cartesian(xlim=c(0,0.05),ylim = c(0,10))
# enrichment vs threshold lot
p1 <- ggplot(rocframe,aes(x=threshold,y=precision/pnull))+
geom_line()+
coord_cartesian(xlim=c(0,0.05),ylim = c(0,10))
ggplot(rocframe,aes(x=threshold,y=precision/pnull))+
geom_line()+
coord_cartesian(xlim=c(0,0.05),ylim = c(0,10))
p2 <- ggplot(rocframe,aes(x=threshold,y=recall))+
geom_line()+
coord_cartesian(xlim=c(0,0.05))
ggplot(rocframe,aes(x=threshold,y=recall))+
geom_line()+
coord_cartesian(xlim=c(0,0.05))
nplot <- function(plist){
n=length(plist)
grid.newpage()
pushViewport(viewport(layout=grid.layout(n,1)))
vplayout <- function(x,y){
viewport(layout.pos.row = x,layout.pos.col = y)
}
for (i in 1:n){
print(plist[i],vp=vplayout(i,1))
}
}
pnull <- mean(as.numeric(dtrain$atRisk))
pnull
# enrichment vs threshold lot
p1 <- ggplot(rocframe,aes(x=threshold,y=precision/pnull))+
geom_line()+
coord_cartesian(xlim=c(0,0.05),ylim = c(0,10))
p2 <- ggplot(rocframe,aes(x=threshold,y=recall))+
geom_line()+
coord_cartesian(xlim=c(0,0.05))
nplot(list(p1,p2))
ctab.test <- table(dtrain$atRisk,dtrain$pred>0.2)
ctab
ctab.test
ctab.test <- table(dtrain$atRisk,dtrain$pred>0.02)
ctab.test
ctab.test <- table(True=dtrain$atRisk,Predicted=dtrain$pred>0.02)
ctab.test
ctab.test <- table(True=dtest$atRisk,Predicted=dtest$pred>0.02)
ctab.test
prec=ctab[2,2]/(ctab[1,2]+ctab[2,2])
prec
prec=ctab.test[2,2]/(ctab.test[1,2]+ctab.test[2,2])
prec
rec=ctab.test[2,2]/(ctab.test[2,2]+ctab.test[2,1])
rec
enrichment <- prec/pnul
enrichment <- prec/pnull
enrichment
summary(model)
coefficients(model)
sign(dtrain$atRisk-dtrain$pred)
sign(as.numeric(dtrain$atRisk)-dtrain$pred)
edev <- sign(as.numeric(dtrain$atRisk)-dtrain$pred)*
sqrt(-2*llcomponents((dtrain$atRisk,dtrain$pred)))
edev <- sign(as.numeric(dtrain$atRisk)-dtrain$pred)*
sqrt(-2*llcomponents(as.numeric(dtrain$atRisk),dtrain$pred))
llcomponents <- function(y,py){
y*log(py)+(1-y)*og(1-py)
}
edev <- sign(as.numeric(dtrain$atRisk)-dtrain$pred)*
sqrt(-2*llcomponents(as.numeric(dtrain$atRisk),dtrain$pred))
llcomponents <- function(y,py){
y*log(py)+(1-y)*log(1-py)
}
edev <- sign(as.numeric(dtrain$atRisk)-dtrain$pred)*
sqrt(-2*llcomponents(as.numeric(dtrain$atRisk),dtrain$pred))
summary(edev)
summary(model)
summary(edev)
residuals(model)
summary(residuals(model))
summary(edev)
null.dev <- -2*llcomponents(as.numeric(dtrain$atRisk),pnull)
null.dev
null.dev <- -2*sum(llcomponents(as.numeric(dtrain$atRisk),pnull))
null.dev
pnull
null.dev <- -2*sum(llcomponents(as.numeric(dtrain$atRisk),pnull))
null.dev
model.dev <- -2*sum(llcomponents(as.numeric(dtrain$atRisk),dtrain$pred))
model.dev
summary(edev)
summary(model)
model.dev
pnull.test <- mean(as.numeric(dtest$atRisk))
pnull.test
null.dev <- -2*sum(llcomponents(as.numeric(dtest$atRisk),dtest$pred))
null.dev
null.dev <- -2*sum(llcomponents(as.numeric(dtest$atRisk),pnull.test))
null.dev
model.dev <- -2*sum(llcomponents(as.numeric(dtest$atRisk),dtest$pred))
model.dev
DOF.null <- dim(dtest)[[1]]-1
DOF.null
DOF.null <- dim(dtrain)[[1]]-1
DOF.null
DOF.model <- dim(dtrain)[[1]]-dim(coefficients(model))[[1]]
DOF.model
dim(coefficients(model))
coefficients(model))
coefficients(model)
dim(coefficients(model))
length(coefficients(model))
DOF.model <- dim(dtrain)[[1]]-length(coefficients(model))
DOF.model
delDev <- null.dev-model.dev
delDev
delDOF <- DOF.null-DOF.model
delDev
delDOF
p <- pchisq(delDev,delDOF)
p
p <- pchisq(delDev,delDOF,lower.tail = F)
p
prsq <- function(x,y){
1-(x/y)
}
prsq(model.dev,null.dev)
AIC <- -sum(llcomponents(as.numeric(dtrain$atRisk),dtrain$pred))+2*length(coefficients(model))
AIC
sum(llcomponents(as.numeric(dtrain$atRisk),dtrain$pred))
AIC <- -2*sum(llcomponents(as.numeric(dtrain$atRisk),dtrain$pred))+2*length(coefficients(model))
AIC
library(ggplot2)
protein <- read.table('protein.txt',sep='\t',header = T)
str(protein)
help(dist)
pmatrix=protein[-1]
dmatrix <- dist(pmatrix,method='euclidean')
dmatrix
str(dmatrix)
p <- hclust(dmatrix,method = 'ward')
p
var_to_use <-colnames(protein)[-1]
pmatrix <- scale(protein[,var_to_use])
pmatrix$center
attr(pmatrix)
attr(pmatrix,'scaled')
attr(pmatrix,'scaled:center')
attr(pmatrix,'scaled:std')
attr(pmatrix,'scaled:scale')
pscae <- attr(pmatrix,'scaled:scale')
dmatrix <- dist(pmatrix,method='euclidean')
dmatrix
str(dmatrix)
pfit <- hclust(dmatrix,method = 'ward')
p
summary(p)
plot(p)
plot(p,labels=protein$Country)
rect.hclust(p,k=5)
groups <- cutree(p,k=5)
groups
str(protein)
rect.hclust(p,k=5)
plot(p)
rect.hclust(p,k=5)
plot(p,labels=protein$Country)
rect.hclust(p,k=5)
groups <- cutree(p,k=5)
groups
p$merge
p$height
p$labels
p$call
print_clusters <- function(labels,k){
for (i in 1:k){
print('Cluster: 1')
print(protein[labels==i,,c("Country","RedMeat","Fish","Fr.Veg")])
}
}
print_clusters(groups,k=5)
groups
groups[[1]]
print_clusters(groups,5)
str(protein)
print_clusters <- function(labels,k){
for (i in 1:k){
print('Cluster: ',i)
print(protein[labels==i,,c("Country","RedMeat","Fish","Fr.Veg")])
}
}
print_clusters(groups,5)
print_clusters(groups,5)
print_clusters <- function(labels,k){
for (i in 1:k){
print(protein[labels==i,,c("Country","RedMeat","Fish","Fr.Veg")])
}
}
print_clusters(groups,5)
print_clusters <- function(labels,k){
for (i in 1:k){
print('Cluster: ',i)
}
}
print_clusters(groups,5)
print_clusters <- function(labels,k){
for (i in 1:k){
print(i)
}
}
print_clusters(groups,5)
print_clusters <- function(labels,k){
for (i in 1:k){
print(paste('Cluster: ',i))
print(protein[labels==i,,c("Country","RedMeat","Fish","Fr.Veg")])
}
}
print_clusters(groups,5)
print_clusters <- function(labels,k){
for (i in 1:k){
print(paste('Cluster: ',i))
}
}
print_clusters(groups,5)
groups==1
print_clusters <- function(labels,k){
for (i in 1:k){
print(paste('Cluster: ',i))
print(protein[labels==i,,c("Country","RedMeat","Fish","Fr.Veg")])
}
}
print_clusters(groups,5)
print_clusters <- function(labels, k) {
for(i in 1:k) {
print(paste("cluster", i))
print(protein[labels==i,c("Country","RedMeat","Fish","Fr.Veg")])
}
}
print_clusters(groups,5)
print_clusters <- function(labels,k) {
for (i in 1:k){
print(paste('Cluster: ',i))
print(protein[labels==i,,c("Country","RedMeat","Fish","Fr.Veg")])
}
}
print_clusters(groups,5)
print_clusters <- function(labels,k) {
for (i in 1:k) {
print(paste('Cluster: ',i))
print(protein[labels==i,c("Country","RedMeat","Fish","Fr.Veg")])
}
}
print_clusters(groups,5)
print_clusters <- function(labels,k) {
for (i in 1:k) {
print(paste('Cluster: ',i))
print(protein[labels==i,c("Country","RedMeat","Fish","Fr.Veg")])
print('\n\n')
}
}
print_clusters(groups,5)
print_clusters <- function(labels,k) {
for (i in 1:k) {
print(paste('Cluster: ',i))
print(protein[labels==i,c("Country","RedMeat","Fish","Fr.Veg")])
print(sprintf('\n\n'))
}
}
print_clusters(groups,5)
print_clusters <- function(labels,k) {
for (i in 1:k) {
print(  )
print(paste('Cluster: ',i))
print(protein[labels==i,c("Country","RedMeat","Fish","Fr.Veg")])
}
}
print_clusters(groups,5)
print_clusters <- function(labels,k) {
for (i in 1:k) {
print()
print(paste('Cluster: ',i))
print(protein[labels==i,c("Country","RedMeat","Fish","Fr.Veg")])
}
}
print_clusters(groups,5)
print_clusters <- function(labels,k) {
for (i in 1:k) {
print('=====')
print(paste('Cluster: ',i))
print(protein[labels==i,c("Country","RedMeat","Fish","Fr.Veg")])
}
}
print_clusters(groups,5)
print_clusters <- function(labels,k) {
for (i in 1:k) {
print(paste('Cluster: ',i))
print(protein[labels==i,c("Country","RedMeat","Fish","Fr.Veg")])
}
}
print_clusters(groups,5)
princ <- prcomp(pmatrix)
ncomp <- 2
project <- predict(princ,pmatrix)
project
project <- predict(princ,pmatrix)[1:ncomp]
project
project <- predict(princ,pmatrix)[,1:ncomp]
project
project.plus <- cbind(data.frame(princ),clusters=as.factor(group),country=protein$Country)
project.plus <- cbind(data.frame(project),clusters=as.factor(group),country=protein$Country)
project.plus <- cbind(data.frame(project),clusters=as.factor(groups),country=protein$Country)
project.plus
ggplot(project.plus,aes(x=PC1,y=PC2))+
geom_point(aes(shape=clusters))+
geom_text(aes(labels=Country))
ggplot(project.plus,aes(x=PC1,y=PC2))+
geom_point(aes(shape=clusters))+
geom_text(aes(labels=country))
ggplot(project.plus,aes(x=PC1,y=PC2))+
geom_point(aes(shape=clusters))+
geom_text(aes(label=country))
ggplot(project.plus,aes(x=PC1,y=PC2))+
geom_point(aes(shape=clusters))+
geom_text(aes(label=country),hjust=1,vjust=2)
ggplot(project.plus,aes(x=PC1,y=PC2))+
geom_point(aes(shape=clusters))+
geom_text(aes(label=country),hjust=0,vjust=2)
ggplot(project.plus,aes(x=PC1,y=PC2))+
geom_point(aes(shape=clusters))+
geom_text(aes(label=country),hjust=0,vjust=1)
install.packages("fpc")
library(fpc)
k.bestp=5
cboot.hclust <- clusterboot(pmatrix,clustermethod = hclustCBI,method='ward',k=k.bestp)
cboot.hclust <- clusterboot(pmatrix,clustermethod = hclustCBI,method='ward.D',k=k.bestp)
summary(cboot.hclust)
cboot.hclust$result
cboot.hclust$result$partition
cboot.hclust$partition
cboot.hclust$bootmean
cboot.hclust$bootbrd
print_clusters(cboot.hclust$partition,k.bestp)
sqr_eqdist <- function(x,y){
sum((x-y)^2)
}
wss.cluster <- function(clustermat){
c0 <- apply(clustermat,MARGIN = 2,FUN=mean)
sum(apply(custermat,MARGIN = 1,FUN=function(clust){ sum((clust-c0)^2) }))
}
wss.tot <- function(dmatrix,labels){
wsstot <- 0
k <- length(unique(labels))
for (i in 1:k){
wsstot <- wsstot + subset(dmatrix,labels==i)
}
wsstot
}
