brules <- apriori(bookbaskets_use,parameter =list((support = 0.002, confidence=0.75)),
appearance=list(rhs=c("The Lovely Bones: A Novel"),default='lhs'))
brules <- apriori(bookbaskets_use,parameter =list(support = 0.002, confidence=0.75),
appearance=list(rhs=c("The Lovely Bones: A Novel"),default='lhs'))
summary(brules)
brules <- apriori(bookbaskets_use,parameter =list(support = 0.001, confidence=0.6),
appearance=list(rhs=c("The Lovely Bones: A Novel"),default='lhs'))
summary(brules)
inspect(head(sort(brules,by='confidence')),n=5)
brulesSub <- subset(brules, subset=!(lhs %in% "Lucky : A Memoir"))
brulesConf <- sort(brulesSub, by="confidence")
inspect(head(lhs(brulesConf), n=5))
library(randomForest)
spamD <- read.table('spamD.tsv',header=T)
spamD <- read.table('spamD.txt',sep='\t',header=T)
str(spamD)
spam_train <- spamD[spamD$rgroup>=10]
spam_train <- spamD[spamD$rgroup>=10,]
spam_test <- spamD[spamD$rgroup<10]
spam_test <- spamD[spamD$rgroup<10,]
spamvars <- setdiff(colnames(spamD),c('rgroup','spam'))
fml <- paste('spam',paste(spamvars,sep='+'),sep='~')
fml
fml <- paste('spam=="spam"',paste(spamvars,collapse='+'),sep='~')
fml
loglikelihood <- function(y,py){
pysmooth <- ifelse(py==0,1e-12,ifelse(py==1,1e-12,py))
sum(y*log(pysmooth)+(1-y)*og(1-pysmooth))
}
library(rpart)
model <- rpart(fml,spam_train)
accuracy_measure(predict(model,spam_train),spam_train$spam,name='training_model')
accuracy_measure <- function(pred,truth,name='model'){
dev.normalize <- -2*loglikelihood(as.numeric(truth),pred)/length(pred)
ctable <- table(truth=truth,pred=(pred>0.5))
accuracy <- sum(diag(ctable))/(sum(ctable))
prec <- ctable[2,2]/(ctable[2,2]+ctable[1,2])
recall=ctable[2,2]/(ctable[2,2]+ctable[2,1])
f1 <- 2*prec*recall/(prec+recall)
data.frame(model=name,accuracy=accuracy,deviance=dev.normalized,precision=prec,recall=recall,f1_score=f1)
}
accuracy_measure(predict(model,spam_train),spam_train$spam,name='training_model')
spam_train$spam
as.numeric(spam_train$spam)
loglikelihood <- function(y,py){
pysmooth <- ifelse(py==0,1e-12,ifelse(py==1,1e-12,py))
sum(y*log(pysmooth)+(1-y)*log(1-pysmooth))
}
accuracy_measure <- function(pred,truth,name='model'){
dev.normalize <- -2*loglikelihood(as.numeric(truth),pred)/length(pred)
ctable <- table(truth=truth,pred=(pred>0.5))
accuracy <- sum(diag(ctable))/(sum(ctable))
prec <- ctable[2,2]/(ctable[2,2]+ctable[1,2])
recall=ctable[2,2]/(ctable[2,2]+ctable[2,1])
f1 <- 2*prec*recall/(prec+recall)
data.frame(model=name,accuracy=accuracy,deviance=dev.normalized,precision=prec,recall=recall,f1_score=f1)
}
model <- rpart(fml,spam_train)
accuracy_measure(predict(model,spam_train),spam_train$spam,name='training_model')
accuracy_measure <- function(pred,truth,name='model'){
dev.normalized <- -2*loglikelihood(as.numeric(truth),pred)/length(pred)
ctable <- table(truth=truth,pred=(pred>0.5))
accuracy <- sum(diag(ctable))/(sum(ctable))
prec <- ctable[2,2]/(ctable[2,2]+ctable[1,2])
recall=ctable[2,2]/(ctable[2,2]+ctable[2,1])
f1 <- 2*prec*recall/(prec+recall)
data.frame(model=name,accuracy=accuracy,deviance=dev.normalized,precision=prec,recall=recall,f1_score=f1)
}
accuracy_measure(predict(model,spam_train),spam_train$spam,name='training_model')
accuracy_measure(precict(model,spam_test),spam_test$spam,name='test_model')
accuracy_measure(predict(model,spam_test),spam_test$spam,name='test_model')
loglikelihood <- function(y,py){
pysmooth <- ifelse(py==0,1e-12,ifelse(py==1,1e-12,py))
sum(y*log(pysmooth)+((1-y)*log(1-pysmooth)))
}
accuracy_measure <- function(pred,truth,name='model'){
dev.normalized <- -2*loglikelihood(as.numeric(truth),pred)/length(pred)
ctable <- table(truth=truth,pred=(pred>0.5))
accuracy <- sum(diag(ctable))/(sum(ctable))
prec <- ctable[2,2]/(ctable[2,2]+ctable[1,2])
recall=ctable[2,2]/(ctable[2,2]+ctable[2,1])
f1 <- 2*prec*recall/(prec+recall)
data.frame(model=name,accuracy=accuracy,deviance=dev.normalized,precision=prec,recall=recall,f1_score=f1)
}
accuracy_measure(predict(model,spam_train),spam_train$spam,name='training_model')
accuracy_measure(predict(model,spam_test),spam_test$spam,name='test_model')
fml <- paste('spam',paste(spamvars,collapse='+'),sep='~')
model <- rpart(fml,spam_train)
predict(model,spam_train)
fml <- paste('spam=="spam"',paste(spamvars,collapse='+'),sep='~')
model <- rpart(fml,spam_train)
predict(model,spam_train)
# Random Forest
n_train <- dim(spam_train)[1]
n <- n_train
n_tree <- 100
samples <- sapply(1:n_tree, FUN=function(iter){
sample(1:n_train,size = n,replace = T)
})
samples
n
str(samples)
dim(samples)
tree_list <- lapply(1:n_tree,FUN=function(iter){
samp <- samples[,iter]
rpart(fml,spam_train[samp,])
})
dim(tree_list)
tree_list
tree_list[1]
dim(tree_list)
length(tree_list)
predict.bag <- function(treelist,newdata){
preds <- sapply(1:length(treelist), FUN=function(iter){
predict(treelist[iter],newdata)
})
predsums <- rowSums(preds)
predsums/length(treelist)
}
accuracy_measure(predict.bag(tree_list,spam_test),spam_test$spam,name='bagging_training')
tree_list[1]
tree_list[[1]]
predict.bag <- function(treelist,newdata){
preds <- sapply(1:length(treelist), FUN=function(iter){
predict(treelist[[iter]],newdata)
})
predsums <- rowSums(preds)
predsums/length(treelist)
}
accuracy_measure(predict.bag(tree_list,spam_test),spam_test$spam,name='bagging_training')
accuracy_measure(predict(model,spam_train),spam_train$spam,name='training_model')
accuracy_measure(predict(model,spam_test),spam_test$spam,name='test_model')
tree_list <- lapply(1:n_tree,FUN=function(iter){
samp <- samples[,iter]
rpart(fml,spam_train[samp,])
})
length(tree_list)
tree_list[[1]]
predict.bag <- function(treelist,newdata){
preds <- sapply(1:length(treelist), FUN=function(iter){
predict(treelist[[iter]],newdata)
})
predsums <- rowSums(preds)
predsums/length(treelist)
}
accuracy_measure(predict.bag(tree_list,spam_test),spam_test$spam,name='bagging_training')
accuracy_measure(predict(model,spam_train),spam_train$spam,name='training_model')
accuracy_measure(predict(model,spam_test),spam_test$spam,name='test_model')
accuracy_measure(predict.bag(tree_list,spam_train),spam_train$spam,name='bagging_training')
accuracy_measure(predict.bag(tree_list,spam_test),spam_test$spam,name='bagging_testing')
# Random Forest
set.seed(123)
rmodel <- randomForest(fml,spam_train,ntree = 100,nodesize = 7,importance=T)
rmodel <- randomForest(spam_train[,spamvars],spam_train$spam,ntree = 100,nodesize = 7,importance=T)
predict(rmodel,spam_train)
predict(rmodel,spam_train,type='prob')
rmodel <- randomForest(fml,spam_train,ntree = 100,nodesize = 7,importance=T)
rmodel <- randomForest(fml,spam_test,ntree = 100,nodesize = 7,importance=T)
predict(rmodel,spam_train,type='prob')['spam']
predict(rmodel,spam_train,type='prob')[,'spam']
accuracy_measure(predict(rmodel,spam_train,type='prob')[,'spam'],spam_train$spam,name='randomForest_training')
accuracy_measure(predict(rmodel,spam_test,type='prob')[,'spam'],spam_test$spam,name='randomForest_training')
accuracy_measure(predict(model,spam_train),spam_train$spam,name='training_model')
accuracy_measure(predict(model,spam_test),spam_test$spam,name='test_model')
accuracy_measure(predict.bag(tree_list,spam_train),spam_train$spam,name='bagging_training')
accuracy_measure(predict.bag(tree_list,spam_test),spam_test$spam,name='bagging_testing')
accuracy_measure(predict(rmodel,spam_train,type='prob')[,'spam'],spam_train$spam,name='randomForest_training')
accuracy_measure(predict(rmodel,spam_test,type='prob')[,'spam'],spam_test$spam,name='randomForest_training')
str(spamD)
summary(rmodel)
rmodel
str(rmodel)
rmodel
summary(
accuracy_measure(predict(rmodel,spam_train,type='prob')[,'spam'],spam_train$spam,name='randomForest_training')
summary(rmodel)
summary(rmodel)
accuracy_measure(predict(rmodel,spam_train,type='prob')[,'spam'],spam_train$spam,name='randomForest_training')
predict(rmodel,spam_test,type='prob')[,'spam']
loglikelihood(spam_train$spam,predict(rmodel,spam_train,type='prob')[,'spam'])
loglikelihood(as.numeric(spam_train$spam),predict(rmodel,spam_train,type='prob')[,'spam'])
-2*loglikelihood(as.numeric(spam_train$spam),predict(rmodel,spam_train,type='prob')[,'spam'])
-2*loglikelihood(as.numeric(spam_train$spam),predict(rmodel,spam_train,type='prob')[,'spam'])/length(spam_train$spam)
-2*loglikelihood(as.numeric(spam_train$spam),predict(model,spam_train,type='prob')[,'spam'])/length(spam_train$spam)
-2*loglikelihood(as.numeric(spam_train$spam),predict(model,spam_train)/length(spam_train$spam)
-2*loglikelihood(as.numeric(spam_train$spam),predict(model,spam_train))/length(spam_train$spam)
-2*loglikelihood(as.numeric(spam_train$spam),predict(model,spam_train))/length(spam_train$spam)
-2*loglikelihood(as.numeric(spam_train$spam),predict(model,spam_train))
str(spamD)
as.factor(spam_train$spam)
values(spam_train$spam)
lavels(spam_train$spam)
levels(spam_train$spam)
levels(spam_train$spam)=c(0,1)
as.factor(spam_train$spam)
str(spamD)
str(spam_train)
spam_train <- spamD[spamD$rgroup>=10,]
accuracy_measure(predict(rmodel,spam_train,type='prob')[,'spam'],spam_train$spam,name='randomForest_training')
accuracy_measure(predict(rmodel,spam_test,type='prob')[,'spam'],spam_test$spam,name='randomForest_training')
summary(rmodel)
rmodel$ntree
rmodel$err.rate
accuracy_measure <- function(pred,truth,name='model'){
tr=ifelse(truth=='spam',1,0)
dev.normalized <- -2*loglikelihood(as.numeric(truth),pred)/length(pred)
ctable <- table(truth=truth,pred=(pred>0.5))
accuracy <- sum(diag(ctable))/(sum(ctable))
prec <- ctable[2,2]/(ctable[2,2]+ctable[1,2])
recall=ctable[2,2]/(ctable[2,2]+ctable[2,1])
f1 <- 2*prec*recall/(prec+recall)
data.frame(model=name,accuracy=accuracy,deviance=dev.normalized,precision=prec,recall=recall,f1_score=f1)
}
accuracy_measure(predict(rmodel,spam_train,type='prob')[,'spam'],spam_train$spam,name='randomForest_training')
accuracy_measure <- function(pred,truth,name='model'){
tr=ifelse(truth=='spam',1,0)
dev.normalized <- -2*loglikelihood(tr,pred)/length(pred)
ctable <- table(truth=truth,pred=(pred>0.5))
accuracy <- sum(diag(ctable))/(sum(ctable))
prec <- ctable[2,2]/(ctable[2,2]+ctable[1,2])
recall=ctable[2,2]/(ctable[2,2]+ctable[2,1])
f1 <- 2*prec*recall/(prec+recall)
data.frame(model=name,accuracy=accuracy,deviance=dev.normalized,precision=prec,recall=recall,f1_score=f1)
}
accuracy_measure(predict(rmodel,spam_train,type='prob')[,'spam'],spam_train$spam,name='randomForest_training')
accuracy_measure(predict(rmodel,spam_test,type='prob')[,'spam'],spam_test$spam,name='randomForest_training')
accuracy_measure(predict.bag(tree_list,spam_train),spam_train$spam,name='bagging_training')
accuracy_measure(predict.bag(tree_list,spam_test),spam_test$spam,name='bagging_testing')
accuracy_measure <- function(pred,truth,name='model'){
tr=ifelse(truth=='spam',1,ifelse(trurh=='non-spam',0,as.numeric(truth)))
dev.normalized <- -2*loglikelihood(tr,pred)/length(pred)
ctable <- table(truth=truth,pred=(pred>0.5))
accuracy <- sum(diag(ctable))/(sum(ctable))
prec <- ctable[2,2]/(ctable[2,2]+ctable[1,2])
recall=ctable[2,2]/(ctable[2,2]+ctable[2,1])
f1 <- 2*prec*recall/(prec+recall)
data.frame(model=name,accuracy=accuracy,deviance=dev.normalized,precision=prec,recall=recall,f1_score=f1)
}
accuracy_measure(predict(rmodel,spam_train,type='prob')[,'spam'],spam_train$spam=='spam',name='randomForest_training')
spam_train$spam=='spam'
accuracy_measure <- function(pred,truth,name='model'){
tr=ifelse(truth=='spam',1,ifelse(truth=='non-spam',0,as.numeric(truth)))
dev.normalized <- -2*loglikelihood(tr,pred)/length(pred)
ctable <- table(truth=truth,pred=(pred>0.5))
accuracy <- sum(diag(ctable))/(sum(ctable))
prec <- ctable[2,2]/(ctable[2,2]+ctable[1,2])
recall=ctable[2,2]/(ctable[2,2]+ctable[2,1])
f1 <- 2*prec*recall/(prec+recall)
data.frame(model=name,accuracy=accuracy,deviance=dev.normalized,precision=prec,recall=recall,f1_score=f1)
}
accuracy_measure(predict(rmodel,spam_train,type='prob')[,'spam'],spam_train$spam=='spam',name='randomForest_training')
accuracy_measure(predict(rmodel,spam_test,type='prob')[,'spam'],spam_test$spam=='non-spam',name='randomForest_training')
accuracy_measure(predict(rmodel,spam_test,type='prob')[,'spam'],spam_test$spam=='spam',name='randomForest_training')
accuracy_measure(predict(rmodel,spam_train,type='prob')[,'spam'],spam_train$spam=='spam',name='randomForest_training')
accuracy_measure(predict(rmodel,spam_test,type='prob')[,'spam'],spam_test$spam=='spam',name='randomForest_training')
accuracy_measure(predict(rmodel,spam_test,type='prob')[,'spam'],spam_test$spam=='spam',name='randomForest_testing')
accuracy_measure(predict.bag(tree_list,spam_train),spam_train$spam=='spam',name='bagging_training')
accuracy_measure(predict.bag(tree_list,spam_test),spam_test$spam=='spam',name='bagging_testing')
accuracy_measure(predict(model,spam_train),spam_train$spam,name='training_model')
accuracy_measure(predict.bag(tree_list,spam_train),spam_train$spam,name='bagging_training')
accuracy_measure(predict.bag(tree_list,spam_test),spam_test$spam',name='bagging_testing')
accuracy_measure(predict.bag(tree_list,spam_test),spam_test$spam,name='bagging_testing')
accuracy_measure(predict(rmodel,spam_train,type='prob')[,'spam'],spam_train$spam=='spam',name='randomForest_training')
varimp=importance(rmodel)
varimp[1:10]
varimp[1:10,]
dim(varimp)
varImpPlot(rmodel)
varImpPlot(rmodel,type=1)
selvar=names(sort(varimp[,1],decreasing = T))[1:25]
selvar
new_rmodel <- randomForest(spam_train[,selvar],spam_train$spam,ntree = 100,nodesize = 7,importance=T)
accuracy_measure(predict(new_rmodel,spam_train,type='prob')[,'spam'],spam_train$spam=='spam',name='randomForest_training')
accuracy_measure(predict(rmodel,spam_train,type='prob')[,'spam'],spam_train$spam=='spam',name='randomForest_training')
accuracy_measure(predict(new_rmodel,spam_test,type='prob')[,'spam'],spam_test$spam=='spam',name='randomForest_testing')
accuracy_measure(predict(new_rmodel,spam_train,type='prob')[,'spam'],spam_train$spam=='spam',name='New_randomForest_training')
accuracy_measure(predict(new_rmodel,spam_test,type='prob')[,'spam'],spam_test$spam=='spam',name='New_randomForest_testing')
library(mglv)
library(mgcv)
x=rnorm(1000,sd=1.5)
x
mean(x)
median(x)
y=runif(1000)
y
select <- rnorm(1000)
noise=rnorm(1000,sd=1.5)
x=runif(1000)
x=3*sin(2*x)+2*cos(0.75*x)-1.5*(x^2)+noise
select <- rnorm(1000)
x=runif(1000)
y=3*sin(2*x)+2*cos(0.75*x)-1.5*(x^2)+noise
frame <- data.frame(x=x,y=y)
train <- frame[select>0.1,]
test <- frame[select<=0.1,]
l_model <- m(y~x,data=train)
l_model <- lm(y~x,data=train)
summary(lm)
summary(l_model)
set.seed(123)
summary(l_model)
l_resid <- train$y-predict(l_model)
sqrt(mean(l_resid))
predict(l_model)
train$y
sqrt(mean(l_resid))
mean(l_resid)
train <- frame[select>0.1,]
test <- frame[select<=0.1,]
l_model <- lm(y~x,data=train)
summary(l_model)
l_resid <- train$y-predict(l_model)
sqrt(mean(l_resid))
sqrt(mean(l_resid^2))
mean(l_resid^2)
gam_model <- gam(y~s(x),data=train)
gam_model$converged
summary(gam_model)
gam_resid <- train$y-predict(gam_model)
sqrt(mean(gam_resid^2))
act=test$y
sqrt(mean(resid_l^2))
act=test$y
lin_pred <- predict(l_model,test)
gam_pred <- predict(gam_model,test)
resid_l <- act-lin_pred
resid_g <- act-gam_pred
sqrt(mean(resid_l^2))
sqrt(mean(resid_g^2))
cor(act,lin_pred)
cor(act,gam_pred)
sx <- predict(gam_model,type='terms')
sx
dim(sx)
summary(sx)
sx[,1]
xframe <- cbind(train,sx=sx[,1])
xframe
ggplot(xframe,aes(x=x))+
geom_point(aes(y=y))
library(ggplot2)
ggplot(xframe,aes(x=x))+
geom_point(aes(y=y))
ggplot(xframe,aes(x=x))+
geom_point(aes(y=y),alpha=0.5)
ggplot(xframe,aes(x=x))+
geom_point(aes(y=y),alpha=0.1)
ggplot(xframe,aes(x=x))+
geom_point(aes(y=y),alpha=0.4)
ggplot(xframe,aes(x=x))+
geom_point(aes(y=y),alpha=0.4,color='blue')
ggplot(xframe,aes(x=x))+
geom_point(aes(y=y),alpha=0.4,color='blue')+
geom_smooth(aes(y=sx))
ggplot(xframe,aes(x=x))+
geom_point(aes(y=y),alpha=0.4,color='blue')+
geom_line(aes(y=sx))
smooth
ggplot(xframe,aes(x=x))+
geom_point(aes(y=y),alpha=0.4,color='blue')+
geom_smooth(aes(y=sx))
set.seed(123)
noise=rnorm(1000,sd=1.5)
x=runif(1000)
y=3*sin(2*x)+2*cos(0.75*x)-1.5*(x^2)+noise
select <- rnorm(1000)
frame <- data.frame(x=x,y=y)
train <- frame[select>0.1,]
test <- frame[select<=0.1,]
l_model <- lm(y~x,data=train)
summary(l_model)
l_resid <- train$y-predict(l_model)
sqrt(mean(l_resid^2))
gam_model <- gam(y~s(x),data=train)
gam_model$converged
summary(gam_model)
gam_resid <- train$y-predict(gam_model)
sqrt(mean(gam_resid^2))
act=test$y
lin_pred <- predict(l_model,test)
gam_pred <- predict(gam_model,test)
resid_l <- act-lin_pred
resid_g <- act-gam_pred
sqrt(mean(resid_l^2))
sqrt(mean(resid_g^2))
cor(act,lin_pred)
cor(act,gam_pred)
# data points used to make the spline graph or predictions using terms
sx <- predict(gam_model,type='terms')
dim(sx)
summary(sx)
xframe <- cbind(train,sx=sx[,1])
xframe
ggplot(xframe,aes(x=x))+
geom_point(aes(y=y),alpha=0.4,color='blue')+
geom_smooth(aes(y=sx))
ggplot(xframe,aes(x=x))+
geom_point(aes(y=y),alpha=0.4,color='blue')+
geom_smooth(aes(y=sx),xlim(-2,2),ylim(-2,2))
ggplot(xframe,aes(x=x))+
geom_point(aes(y=y),alpha=0.4,color='blue')+
geom_smooth(aes(y=sx),xlim=c(-2,2),ylim=c(-2,2))
ggplot(xframe,aes(x=x))+
geom_point(aes(y=y),alpha=0.4,color='blue')+
geom_smooth(aes(y=sx))+
xlim(-2,2)
ggplot(xframe,aes(x=x))+
geom_point(aes(y=y),alpha=0.4,color='blue')+
geom_smooth(aes(y=sx))+
ylim(-2,2)
ggplot(xframe,aes(x=x))+
geom_point(aes(y=y),alpha=0.4,color='blue')+
geom_smooth(aes(y=sx))+
ylim(-3,4)
ggplot(xframe,aes(x=x))+
geom_point(aes(y=y),alpha=0.4,color='blue')+
geom_smooth(aes(y=sx))+
ylim(-5,6)
x
y=3*sin(2*x)+2*cos(0.75*x)-1.5*(x^2)+noise
y
x=rnorm(1000)
select <- runif(1000)
runif(1000)
set.seed(123)
noise=rnorm(1000,sd=1.5)
x=rnorm(1000)
y=3*sin(2*x)+2*cos(0.75*x)-1.5*(x^2)+noise
select <- runif(1000)
frame <- data.frame(x=x,y=y)
train <- frame[select>0.1,]
test <- frame[select<=0.1,]
l_model <- lm(y~x,data=train)
summary(l_model)
l_resid <- train$y-predict(l_model)
sqrt(mean(l_resid^2))
gam_model <- gam(y~s(x),data=train)
gam_model$converged
summary(gam_model)
gam_resid <- train$y-predict(gam_model)
sqrt(mean(gam_resid^2))
act=test$y
lin_pred <- predict(l_model,test)
gam_pred <- predict(gam_model,test)
resid_l <- act-lin_pred
resid_g <- act-gam_pred
sqrt(mean(resid_l^2))
sqrt(mean(resid_g^2))
cor(act,lin_pred)
cor(act,gam_pred)
# data points used to make the spline graph or predictions using terms
sx <- predict(gam_model,type='terms')
dim(sx)
summary(sx)
xframe <- cbind(train,sx=sx[,1])
xframe
ggplot(xframe,aes(x=x))+
geom_point(aes(y=y),alpha=0.4,color='blue')+
geom_smooth(aes(y=sx))+
ylim(-5,6)
ggplot(xframe,aes(x=x))+
geom_point(aes(y=y),alpha=0.4,color='blue')+
geom_smooth(aes(y=sx),color='green')+
ylim(-5,6)
x=rnorm(10)
rnorm(10)
runif(10)
load('NatalBirthData.rData')
load('NatalBirthData.rData')
str(sdata)
train <- sdata[sdata$ORIGRANDGROUP<=5,]
test <- sdata[sdata$ORIGRANDGROUP>5,]
form.lin <- as.formula("DBWT ~ PWGT + WTGAIN + MAGER + UPREVIS")
linmodel <- lm(form.lin, data=train)
summary(linmodel)
form.glin <- as.formula("DBWT ~ s(PWGT) + s(WTGAIN) +s(MAGER) + s(UPREVIS)")
g_model <- gam(form.glin, data=train)
g_model$converged
summary(g_model)
terms <- predict(g_model, type="terms")
tframe <-cbind(DBWT = train$DBWT, as.data.frame(terms))
colnames(tframe) <- gsub('[()]', '', colnames(tframe))
pframe <- cbind(tframe, train[,c("PWGT", "WTGAIN", "MAGER", "UPREVIS")])
p1 <- ggplot(pframe, aes(x=PWGT)) +
geom_point(aes(y=scale(sPWGT, scale=F))) +
geom_smooth(aes(y=scale(DBWT, scale=F)))
ggplot(pframe, aes(x=PWGT)) +
geom_point(aes(y=scale(sPWGT, scale=F))) +
geom_smooth(aes(y=scale(DBWT, scale=F)))
ggplot(pframe, aes(x=PWGT)) +
geom_point(aes(y=scale(sPWGT, scale=F))) +
geom_smooth(aes(y=scale(DBWT, scale=F)))  +
geom_point(aes(y=scale(MAGER, scale=F))) +
geom_smooth(aes(y=scale(DBWT, scale=F)))
pred.lin <- predict(l_model, newdata=test)
pred.glin <- predict(g_model, newdata=test)
cor(pred.lin, test$DBWT)^2
l_model <- lm(form.lin, data=train)
pred.lin <- predict(l_model, newdata=test)
pred.glin <- predict(g_model, newdata=test)
cor(pred.lin, test$DBWT)^2
cor(pred.glin, test$DBWT)^2
ggplot(pframe, aes(x=PWGT)) +
geom_point(aes(y=scale(sPWGT, scale=F))) +
geom_smooth(aes(y=scale(DBWT, scale=F)))  +
geom_point(aes(y=scale(sMAGER, scale=F))) +
geom_smooth(aes(y=scale(DBWT, scale=F)))
ggplot(pframe, aes(x=PWGT)) +
geom_point(aes(y=scale(sPWGT, scale=F))) +
geom_smooth(aes(y=scale(DBWT, scale=F)))  +
geom_point(aes(x=MAGER,y=scale(sMAGER, scale=F))) +
geom_smooth(aes(y=scale(DBWT, scale=F)))
