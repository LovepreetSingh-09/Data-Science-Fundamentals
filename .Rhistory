table218
table218[1]
table218[2]
table218[3]
table218[4]
print(table218[,2]/(table218[,1]+table218[,2]))
table218[pos]
table218[1]
table218
table218[,1]
table218[,'1']
colSums(table218)
makepred <- function(outcol,varcol,appcol){
pPos <- sum(outcol==pos)/length(outcol)
natab <- table(as.factor(outcol[is.na(varcol)]))
pPoswna=(natab/sum(natab))[pos]
vtab <- table(as.factor(outcol),varcol)
pPoswv <- vtab[pos,]/colSums(vtabs)
pred <- pPoswv[appcol]
pred[is.na(appcol)]=pPoswna
pred[is.na(pred)] <- pPos
}
for (v in catvars) {
pi <- paste('pred',v,sep='')
dtrain[,pi] <- mkpred(dtrain[,outcome],dtrain[,v],dtrain[,v])
dcal[,pi] <- mkpred(dtrain[,outcome],dtrain[,v],dcal[,v])
dtest[,pi] <- nkpred(dtrain[,outcome],dtrain[,v],dtest[,v])
}
for (v in catvars) {
pi <- paste('pred',v,sep='')
dtrain[,pi] <- makepred(dtrain[,outcome],dtrain[,v],dtrain[,v])
dcal[,pi] <- makepred(dtrain[,outcome],dtrain[,v],dcal[,v])
dtest[,pi] <- makepred(dtrain[,outcome],dtrain[,v],dtest[,v])
}
makepred <- function(outcol,varcol,appcol){
pPos <- sum(outcol==pos)/length(outcol)
natab <- table(as.factor(outcol[is.na(varcol)]))
pPoswna=(natab/sum(natab))[pos]
vtab <- table(as.factor(outcol),varcol)
pPoswv <- vtab[pos,]/colSums(vtab)
pred <- pPoswv[appcol]
pred[is.na(appcol)]=pPoswna
pred[is.na(pred)] <- pPos
}
for (v in catvars) {
pi <- paste('pred',v,sep='')
dtrain[,pi] <- makepred(dtrain[,outcome],dtrain[,v],dtrain[,v])
dcal[,pi] <- makepred(dtrain[,outcome],dtrain[,v],dcal[,v])
dtest[,pi] <- makepred(dtrain[,outcome],dtrain[,v],dtest[,v])
}
makepred <- function(outcol,varcol,appcol){
pPos <- sum(outcol==pos)/length(outcol)
natab <- table(as.factor(outcol[is.na(varcol)]))
pPoswna=(natab/sum(natab))[pos]
vtab <- table(as.factor(outcol),varcol)
pPoswv <- vtab[pos,]/colSums(vtab)
pred <- pPoswv[appcol]
pred[is.na(appcol)]=pPoswna
pred[is.na(pred)] <- pPos
pred
}
for (v in catvars) {
pi <- paste('pred',v,sep='')
dtrain[,pi] <- makepred(dtrain[,outcome],dtrain[,v],dtrain[,v])
dcal[,pi] <- makepred(dtrain[,outcome],dtrain[,v],dcal[,v])
dtest[,pi] <- makepred(dtrain[,outcome],dtrain[,v],dtest[,v])
}
calcAUC <- function(predcol,outcol){
perf <- performance(prediction(predcol,outcol==pos),measure = 'auc')
as.numeric(perf$y.values)
}
for (v in catvars){
pi <- paste('pred',v,sep='')
auctrain <- calcAUC(dtrain[,pi],dtrain[,outcome])
if (auctrain>0.8){
auccal <- calcAUC(dcal[,pi],dcal[,outcome])
print(sprintf('%s trainAUC: %4.3f  CalibrtionAUC: %4.3f',dtrain[,pi],auctrain,auccal))
}
}
library(ROCR)
for (v in catvars){
pi <- paste('pred',v,sep='')
auctrain <- calcAUC(dtrain[,pi],dtrain[,outcome])
if (auctrain>0.8){
auccal <- calcAUC(dcal[,pi],dcal[,outcome])
print(sprintf('%s trainAUC: %4.3f  CalibrtionAUC: %4.3f',dtrain[,pi],auctrain,auccal))
}
}
calcAUC <- function(predcol,outcol){
perf <- performance(prediction(predcol,outcol==pos),measure = 'auc')
as.numeric(perf@y.values)
}
for (v in catvars){
pi <- paste('pred',v,sep='')
auctrain <- calcAUC(dtrain[,pi],dtrain[,outcome])
if (auctrain>0.8){
auccal <- calcAUC(dcal[,pi],dcal[,outcome])
print(sprintf('%s trainAUC: %4.3f  CalibrtionAUC: %4.3f',dtrain[,pi],auctrain,auccal))
}
}
for (v in catvars){
pi <- paste('pred',v,sep='')
auctrain <- calcAUC(dtrain[,pi],dtrain[,outcome])
if (auctrain>0.8){
auccal <- calcAUC(dcal[,pi],dcal[,outcome])
print(sprintf('%s trainAUC: %4.3f  CalibrtionAUC: %4.3f',pi,auctrain,auccal))
}
}
library(ggplot2)
library(scales)
custdata=read.table('custdata.tsv',sep='\t',header=T)
summary(custdata)
# Missing values in categorical variables
summary(custdata[is.na(custdata$housing.type),c('recent.move','num.vehicles')])
custdata$employed.fix=as.factor(ifelse(is.na(custdata$is.employed),'missing',
ifelse(custdata$is.employed==T,'employed','un-employed')))
summary(custdata$employed.fix)
# Missing values in numeric data
summary(custdata$income)
custdata$income=ifelse(custdata$income<0,NA,custdata$income)
mean_income=mean(custdata$income,na.rm = T)
mean_income
custdata$income.fix=ifelse(is.na(custdata$income),mean_income,custdata$income)
summary(custdata$income.fix)
breaks=c(0,10000,50000,100000,1000000)
income_group=cut(custdata$income,breaks=breaks,include.lowest = T)
summary(income_group)
income_group=as.character((income_group))
summary(income_group)
Income_gp=as.factor(ifelse(is.na(income_group),'no_income',income_group))
summary(Income_gp)
# Data Transformation
median_income=aggregate(income~state.of.res,custdata,FUN=median)
colnames(median_income)=c('State','median.income')
summary(median_income)
source('~/R/Data-science-fundamentals/modelling_methods.R')
a=sample(20,10)
a
quantile(a,probs=seq(0,1,0.1),na.rm = T)
v=quantile(a,probs=seq(0,1,0.1),na.rm = T)
as.numeric(v)
v=quantile(a,probs=seq(0,1,0.2),na.rm = T)
as.numeric(v)
a=sample(20,10)
a
v=quantile(a,probs=seq(0,1,0.1),na.rm = T)
as.numeric(v)
a=sample(20,3)
a
v=quantile(a,probs=seq(0,1,0.1),na.rm = T)
as.numeric(v)
a=sample(20,4)
a
v=quantile(a,probs=seq(0,1,0.1),na.rm = T)
as.numeric(v)
sort(a)
a=sample(20,10)
a
sort(a)
v=quantile(a,probs=seq(0,1,0.1),na.rm = T)
as.numeric(v)
v
v=quantile(a,probs=seq(0,1,0.05),na.rm = T)
v
a=seq(1,5,1)
a
sort(a)
v=quantile(a,probs=seq(0,1,0.05),na.rm = T)
v
(20,10)
a=sample(20,10)
a
sort(a)
v=quantile(a,probs=seq(0,1,0.25),na.rm = T)
v
v=quantile(a)
v
a=sample(20,19)
a
sort(a)
a=sample(20,9)
a
sort(a)
v=quantile(a,probs=seq(0,1,0.25),na.rm = T)
v
v=quantile(a,probs=seq(0,1,0.1),na.rm = T)
v
unique(as.numeric(v))
v=unique(as.numeric(v))
cut(a,v)
for (v in numvars){
pi <- paste('pred',v,sep='')
dTrain[,pi] <- mkPredN(dTrain[,outcome],dTrain[,v],dTrain[,v])
dTest[,pi] <- mkPredN(dTrain[,outcome],dTrain[,v],dTest[,v])
dCal[,pi] <- mkPredN(dTrain[,outcome],dTrain[,v],dCal[,v])
aucTrain <- calcAUC(dtrain[,pi],dtrain[,outcome])
if(aucTrain>=0.55) {
aucCal <- calcAUC(dCal[,pi],dCal[,outcome])
print(sprintf("%s, trainAUC: %4.3f calibrationAUC: %4.3f", pi,aucTrain,aucCal))
}
}
mkPredN <- function(varcol,outcol,predcol){
cuts <- unique(as.numeric(quantile(varcol,probs=seq(0,1,0.1),na.rm = T)))
varC <- cut(varcol,cuts)
appC <- cut(appcol,cuts)
makepred(outcol,varC,appC)
}
for (v in numvars){
pi <- paste('pred',v,sep='')
dTrain[,pi] <- mkPredN(dTrain[,outcome],dTrain[,v],dTrain[,v])
dTest[,pi] <- mkPredN(dTrain[,outcome],dTrain[,v],dTest[,v])
dCal[,pi] <- mkPredN(dTrain[,outcome],dTrain[,v],dCal[,v])
aucTrain <- calcAUC(dtrain[,pi],dtrain[,outcome])
if(aucTrain>=0.55) {
aucCal <- calcAUC(dCal[,pi],dCal[,outcome])
print(sprintf("%s, trainAUC: %4.3f calibrationAUC: %4.3f", pi,aucTrain,aucCal))
}
}
for (v in numvars){
pi <- paste('pred',v,sep='')
dTrain[,pi] <- mkPredN(dtrain[,outcome],dTrain[,v],dTrain[,v])
dTest[,pi] <- mkPredN(dtrain[,outcome],dTrain[,v],dTest[,v])
dCal[,pi] <- mkPredN(dtrain[,outcome],dTrain[,v],dCal[,v])
aucTrain <- calcAUC(dtrain[,pi],dtrain[,outcome])
if(aucTrain>=0.55) {
aucCal <- calcAUC(dCal[,pi],dCal[,outcome])
print(sprintf("%s, trainAUC: %4.3f calibrationAUC: %4.3f", pi,aucTrain,aucCal))
}
}
for (v in numvars){
pi <- paste('pred',v,sep='')
dTrain[,pi] <- mkPredN(dtrain[,outcome],dTrain[,v],dTrain[,v])
dTest[,pi] <- mkPredN(dtrain[,outcome],dTrain[,v],dTest[,v])
dCal[,pi] <- mkPredN(dtrain[,outcome],dTrain[,v],dCal[,v])
aucTrain <- calcAUC(dtrain[,pi],dtrain[,outcome])
if(aucTrain>=0.55) {
aucCal <- calcAUC(dCal[,pi],dCal[,outcome])
print(sprintf("%s, trainAUC: %4.3f calibrationAUC: %4.3f", pi,aucTrain,aucCal))
}
}
mkPredN <- function(varcol,outcol,appcol){
cuts <- unique(as.numeric(quantile(varcol,probs=seq(0,1,0.1),na.rm = T)))
varC <- cut(varcol,cuts)
appC <- cut(appcol,cuts)
makepred(outcol,varC,appC)
}
for (v in numvars){
pi <- paste('pred',v,sep='')
dTrain[,pi] <- mkPredN(dtrain[,outcome],dTrain[,v],dTrain[,v])
dTest[,pi] <- mkPredN(dtrain[,outcome],dTrain[,v],dTest[,v])
dCal[,pi] <- mkPredN(dtrain[,outcome],dTrain[,v],dCal[,v])
aucTrain <- calcAUC(dtrain[,pi],dtrain[,outcome])
if(aucTrain>=0.55) {
aucCal <- calcAUC(dCal[,pi],dCal[,outcome])
print(sprintf("%s, trainAUC: %4.3f calibrationAUC: %4.3f", pi,aucTrain,aucCal))
}
}
for (v in numvars){
pi <- paste('pred',v,sep='')
dTrain[,pi] <- mkPredN(dtrain[,outcome],dtrain[,v],dtrain[,v])
dTest[,pi] <- mkPredN(dtrain[,outcome],dtrain[,v],dtest[,v])
dCal[,pi] <- mkPredN(dtrain[,outcome],dtrain[,v],dcal[,v])
aucTrain <- calcAUC(dtrain[,pi],dtrain[,outcome])
if(aucTrain>=0.55) {
aucCal <- calcAUC(dCal[,pi],dCal[,outcome])
print(sprintf("%s, trainAUC: %4.3f calibrationAUC: %4.3f", pi,aucTrain,aucCal))
}
}
for (v in numvars){
pi <- paste('pred',v,sep='')
dTrain[,pi] <- mkPredN(dtrain[,outcome],dtrain[,v],dtrain[,v])
dTest[,pi] <- mkPredN(dtrain[,outcome],dtrain[,v],dtest[,v])
dCal[,pi] <- mkPredN(dtrain[,outcome],dtrain[,v],dcal[,v])
aucTrain <- calcAUC(dtrain[,pi],dtrain[,outcome])
if(aucTrain>=0.55) {
aucCal <- calcAUC(dCal[,pi],dCal[,outcome])
print(sprintf("%s, trainAUC: %4.3f calibrationAUC: %4.3f", pi,aucTrain,aucCal))
}
}
for (v in numvars){
pi <- paste('pred',v,sep='')
dtrain[,pi] <- mkPredN(dtrain[,outcome],dtrain[,v],dtrain[,v])
dtest[,pi] <- mkPredN(dtrain[,outcome],dtrain[,v],dtest[,v])
dcal[,pi] <- mkPredN(dtrain[,outcome],dtrain[,v],dcal[,v])
aucTrain <- calcAUC(dtrain[,pi],dtrain[,outcome])
if(aucTrain>=0.55) {
aucCal <- calcAUC(dCal[,pi],dCal[,outcome])
print(sprintf("%s, trainAUC: %4.3f calibrationAUC: %4.3f", pi,aucTrain,aucCal))
}
}
mkPredN <- function(varcol,outcol,appcol){
cuts <- unique(as.numeric(quantile(varcol,probs=seq(0,1,0.1),na.rm = T)))
varC <- cut(varcol,cuts)
appC <- cut(appcol,cuts)
makepred(outcol,varC,appC)
}
for (v in numvars){
pi <- paste('pred',v,sep='')
dtrain[,pi] <- mkPredN(dtrain[,outcome],dtrain[,v],dtrain[,v])
dtest[,pi] <- mkPredN(dtrain[,outcome],dtrain[,v],dtest[,v])
dcal[,pi] <- mkPredN(dtrain[,outcome],dtrain[,v],dcal[,v])
aucTrain <- calcAUC(dtrain[,pi],dtrain[,outcome])
if(aucTrain>=0.55) {
aucCal <- calcAUC(dCal[,pi],dCal[,outcome])
print(sprintf("%s, trainAUC: %4.3f calibrationAUC: %4.3f", pi,aucTrain,aucCal))
}
}
for (v in numvars){
pi <- paste('pred',v,sep='')
dtrain[,pi] <- mkPredN(dtrain[,outcome],dtrain[,v],dtrain[,v])
dtest[,pi] <- mkPredN(dtrain[,outcome],dtrain[,v],dtest[,v])
dcal[,pi] <- mkPredN(dtrain[,outcome],dtrain[,v],dcal[,v])
aucTrain <- calcAUC(dtrain[,pi],dtrain[,outcome])
}
makepred <- function(outcol,varcol,appcol){
pPos <- sum(outcol==pos)/length(outcol)
natab <- table(as.factor(outcol[is.na(varcol)]))
pPoswna=(natab/sum(natab))[pos]
vtab <- table(as.factor(outcol),varcol)
pPoswv <- vtab[pos, ]/colSums(vtab)
pred <- pPoswv[appcol]
pred[is.na(appcol)]=pPoswna
pred[is.na(pred)] <- pPos
pred
}
for (v in catvars) {
pi <- paste('pred',v,sep='')
dtrain[,pi] <- makepred(dtrain[,outcome],dtrain[,v],dtrain[,v])
dcal[,pi] <- makepred(dtrain[,outcome],dtrain[,v],dcal[,v])
dtest[,pi] <- makepred(dtrain[,outcome],dtrain[,v],dtest[,v])
}
calcAUC <- function(predcol,outcol){
perf <- performance(prediction(predcol,outcol==pos),measure = 'auc')
as.numeric(perf@y.values)
}
for (v in catvars){
pi <- paste('pred',v,sep='')
auctrain <- calcAUC(dtrain[,pi],dtrain[,outcome])
if (auctrain>0.8){
auccal <- calcAUC(dcal[,pi],dcal[,outcome])
print(sprintf('%s trainAUC: %4.3f  CalibrtionAUC: %4.3f',pi,auctrain,auccal))
}
}
mkPredN <- function(varcol,outcol,appcol){
cuts <- unique(as.numeric(quantile(varcol,probs=seq(0,1,0.1),na.rm = T)))
varC <- cut(varcol,cuts)
appC <- cut(appcol,cuts)
makepred(outcol,varC,appC)
}
for (v in numvars){
pi <- paste('pred',v,sep='')
dtrain[,pi] <- mkPredN(dtrain[,outcome],dtrain[,v],dtrain[,v])
dtest[,pi] <- mkPredN(dtrain[,outcome],dtrain[,v],dtest[,v])
dcal[,pi] <- mkPredN(dtrain[,outcome],dtrain[,v],dcal[,v])
aucTrain <- calcAUC(dtrain[,pi],dtrain[,outcome])
if(aucTrain>=0.55) {
aucCal <- calcAUC(dCal[,pi],dCal[,outcome])
print(sprintf("%s, trainAUC: %4.3f calibrationAUC: %4.3f", pi,aucTrain,aucCal))
}
}
length(dcal[,outcome])
dcal[,outcome]==pos
sum(dcal[,outcome]==pos/length(dcal[,outcome]))
baseRateCheck <-logLikelyhood(dcal[,outcome],sum(dcal[,outcome]==pos/length(dcal[,outcome])))
logLikelyhood <- function(outcol,predcol){
sum(ifelse(outcol==pos,log2(predcol),log2(1-predcol)))
}
selVars <- c()
minStep <- 5
baseRateCheck <-logLikelyhood(dcal[,outcome],sum(dcal[,outcome]==pos/length(dcal[,outcome])))
sum(as.numeric(dcal[,outcome]==pos)/length(dcal[,outcome]))
baseRateCheck <-logLikelyhood(dcal[,outcome],sum(as.numeric(dcal[,outcome]==pos)/length(dcal[,outcome])))
for(v in catvars) {
pi <- paste('pred',v,sep='')
liCheck <- 2*((logLikelyhood(dcal[,outcome],dcal[,pi]) -
baseRateCheck))
if(liCheck>minStep) {
print(sprintf("%s, calibrationScore: %g",
pi,liCheck))
selVars <- c(selVars,pi)
}
}
makepred <- function(outcol,varcol,appcol){
pPos <- sum(outcol==pos)/length(outcol)
natab <- table(as.factor(outcol[is.na(varcol)]))
pPoswna=(natab/sum(natab))[pos]
vtab <- table(as.factor(outcol),varcol)
pPoswv <- (vtab[pos, ])/(colSums(vtab))
pred <- pPoswv[appcol]
pred[is.na(appcol)]=pPoswna
pred[is.na(pred)] <- pPos
pred
}
for (v in catvars) {
pi <- paste('pred',v,sep='')
dtrain[,pi] <- makepred(dtrain[,outcome],dtrain[,v],dtrain[,v])
dcal[,pi] <- makepred(dtrain[,outcome],dtrain[,v],dcal[,v])
dtest[,pi] <- makepred(dtrain[,outcome],dtrain[,v],dtest[,v])
}
calcAUC <- function(predcol,outcol){
perf <- performance(prediction(predcol,outcol==pos),measure = 'auc')
as.numeric(perf@y.values)
}
for (v in catvars){
pi <- paste('pred',v,sep='')
auctrain <- calcAUC(dtrain[,pi],dtrain[,outcome])
if (auctrain>0.8){
auccal <- calcAUC(dcal[,pi],dcal[,outcome])
print(sprintf('%s trainAUC: %4.3f  CalibrtionAUC: %4.3f',pi,auctrain,auccal))
}
}
mkPredN <- function(varcol,outcol,appcol){
cuts <- unique(as.numeric(quantile(varcol,probs=seq(0,1,0.1),na.rm = T)))
varC <- cut(varcol,cuts)
appC <- cut(appcol,cuts)
makepred(outcol,varC,appC)
}
for (v in numvars){
pi <- paste('pred',v,sep='')
dtrain[,pi] <- mkPredN(dtrain[,outcome],dtrain[,v],dtrain[,v])
dtest[,pi] <- mkPredN(dtrain[,outcome],dtrain[,v],dtest[,v])
dcal[,pi] <- mkPredN(dtrain[,outcome],dtrain[,v],dcal[,v])
aucTrain <- calcAUC(dtrain[,pi],dtrain[,outcome])
if(aucTrain>=0.55) {
aucCal <- calcAUC(dcal[,pi],dcal[,outcome])
print(sprintf("%s, trainAUC: %4.3f calibrationAUC: %4.3f", pi,aucTrain,aucCal))
}
}
for(v in numericVars) {
pi <- paste('pred',v,sep='')
liCheck <- 2*((logLikelyhood(dCal[,outcome],dCal[,pi]) -
baseRateCheck) - 1)
if(liCheck>=minStep) {
print(sprintf("%s, calibrationScore: %g",
pi,liCheck))
selVars <- c(selVars,pi)
}
}
for(v in numVars) {
pi <- paste('pred',v,sep='')
liCheck <- 2*((logLikelyhood(dCal[,outcome],dCal[,pi]) -
baseRateCheck) - 1)
if(liCheck>=minStep) {
print(sprintf("%s, calibrationScore: %g",
pi,liCheck))
selVars <- c(selVars,pi)
}
}
for(v in numvars) {
pi <- paste('pred',v,sep='')
liCheck <- 2*((logLikelyhood(dCal[,outcome],dCal[,pi]) -
baseRateCheck) - 1)
if(liCheck>=minStep) {
print(sprintf("%s, calibrationScore: %g",
pi,liCheck))
selVars <- c(selVars,pi)
}
}
for(v in numvars) {
pi <- paste('pred',v,sep='')
liCheck <- 2*((logLikelyhood(dcal[,outcome],dcal[,pi]) -baseRateCheck) - 1)
if(liCheck>=minStep) {
print(sprintf("%s, calibrationScore: %g", pi,liCheck))
selVars <- c(selVars,pi)
}
}
library(rpart)
f <- paste(outcome,'>0~',paste(selVars,collapse = '+'),sep='')
f
tmodel <- rpart(f,data=dtrain,rpart.control(minsplit = 1000,minbucket = 1000,cp=0.001,maxdepth = 5))
f <- paste(outcome,'>0 ~ ',paste(selVars,collapse = '+'),sep='')
f
tmodel <- rpart(f,data=dtrain,rpart.control(minsplit = 1000,minbucket = 1000,cp=0.001,maxdepth = 5))
tmodel <- rpart(f,data=dtrain)
tmodel <- rpart(f,data=dtrain,rpart.control(minsplit = 1000,minbucket = 1000,cp=0.001,maxdepth = 5))
tmodel <- rpart(f,data=dtrain,control=rpart.control(minsplit = 1000,minbucket = 1000,cp=0.001,maxdepth = 5))
tmodel
print(calcAUC(predict(tmodel,dtrain),dtrain[,outcome]))
print(calcAUC(predict(tmodel,dtest),dtrain[,outcome]))
print(calcAUC(predict(tmodel,dtest),dtest[,outcome]))
print(calcAUC(predict(tmodel,dcal),dcal[,outcome]))
par(cex=0.7)
plot(tmodel)
text(tmodel)
nK <- 200
knnTrain <- dTrain[,selVars]
knnTrain <- dtrain[,selVars]
knnCl <- dtrain[,outcome]==pos
knnPred <- function(df) {
knnDecision <- knn(knnTrain,df,knnCl,k=nK,prob=T)
ifelse(knnDecision==TRUE,
attributes(knnDecision)$prob,
1-(attributes(knnDecision)$prob))
}
print(calcAUC(knnPred(dtrain[,selVars]),dtrain[,outcome]))
library(class)
print(calcAUC(knnPred(dtrain[,selVars]),dtrain[,outcome]))
print(calcAUC(knnPred(dcal[,selVars]),dcal[,outcome]))
print(calcAUC(knnPred(dtest[,selVars]),dtest[,outcome]))
dcal$kpred <- knnPred(dcal[,selVars])
ggplot(data=dcal) +
geom_density(aes(x=kpred, color=as.factor(churn),linetype=as.factor(churn)))
plotROC <- function(predcol,outcol) {
perf <- performance(prediction(predcol,outcol==pos),'tpr','fpr')
pf <- data.frame(
FalsePositiveRate=perf@x.values[[1]],
TruePositiveRate=perf@y.values[[1]])
ggplot() +
geom_line(data=pf,aes(x=FalsePositiveRate,y=TruePositiveRate)) +
geom_line(aes(x=c(0,1),y=c(0,1)))
}
print(plotROC(knnPred(dtest[,selVars]),dtest[,outcome]))
