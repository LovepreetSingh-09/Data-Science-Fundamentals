geom_smooth(aes(y=sx))
set.seed(123)
noise=rnorm(1000,sd=1.5)
x=runif(1000)
y=3*sin(2*x)+2*cos(0.75*x)-1.5*(x^2)+noise
select <- rnorm(1000)
frame <- data.frame(x=x,y=y)
train <- frame[select>0.1,]
test <- frame[select<=0.1,]
l_model <- lm(y~x,data=train)
summary(l_model)
l_resid <- train$y-predict(l_model)
sqrt(mean(l_resid^2))
gam_model <- gam(y~s(x),data=train)
gam_model$converged
summary(gam_model)
gam_resid <- train$y-predict(gam_model)
sqrt(mean(gam_resid^2))
act=test$y
lin_pred <- predict(l_model,test)
gam_pred <- predict(gam_model,test)
resid_l <- act-lin_pred
resid_g <- act-gam_pred
sqrt(mean(resid_l^2))
sqrt(mean(resid_g^2))
cor(act,lin_pred)
cor(act,gam_pred)
# data points used to make the spline graph or predictions using terms
sx <- predict(gam_model,type='terms')
dim(sx)
summary(sx)
xframe <- cbind(train,sx=sx[,1])
xframe
ggplot(xframe,aes(x=x))+
geom_point(aes(y=y),alpha=0.4,color='blue')+
geom_smooth(aes(y=sx))
ggplot(xframe,aes(x=x))+
geom_point(aes(y=y),alpha=0.4,color='blue')+
geom_smooth(aes(y=sx),xlim(-2,2),ylim(-2,2))
ggplot(xframe,aes(x=x))+
geom_point(aes(y=y),alpha=0.4,color='blue')+
geom_smooth(aes(y=sx),xlim=c(-2,2),ylim=c(-2,2))
ggplot(xframe,aes(x=x))+
geom_point(aes(y=y),alpha=0.4,color='blue')+
geom_smooth(aes(y=sx))+
xlim(-2,2)
ggplot(xframe,aes(x=x))+
geom_point(aes(y=y),alpha=0.4,color='blue')+
geom_smooth(aes(y=sx))+
ylim(-2,2)
ggplot(xframe,aes(x=x))+
geom_point(aes(y=y),alpha=0.4,color='blue')+
geom_smooth(aes(y=sx))+
ylim(-3,4)
ggplot(xframe,aes(x=x))+
geom_point(aes(y=y),alpha=0.4,color='blue')+
geom_smooth(aes(y=sx))+
ylim(-5,6)
x
y=3*sin(2*x)+2*cos(0.75*x)-1.5*(x^2)+noise
y
x=rnorm(1000)
select <- runif(1000)
runif(1000)
set.seed(123)
noise=rnorm(1000,sd=1.5)
x=rnorm(1000)
y=3*sin(2*x)+2*cos(0.75*x)-1.5*(x^2)+noise
select <- runif(1000)
frame <- data.frame(x=x,y=y)
train <- frame[select>0.1,]
test <- frame[select<=0.1,]
l_model <- lm(y~x,data=train)
summary(l_model)
l_resid <- train$y-predict(l_model)
sqrt(mean(l_resid^2))
gam_model <- gam(y~s(x),data=train)
gam_model$converged
summary(gam_model)
gam_resid <- train$y-predict(gam_model)
sqrt(mean(gam_resid^2))
act=test$y
lin_pred <- predict(l_model,test)
gam_pred <- predict(gam_model,test)
resid_l <- act-lin_pred
resid_g <- act-gam_pred
sqrt(mean(resid_l^2))
sqrt(mean(resid_g^2))
cor(act,lin_pred)
cor(act,gam_pred)
# data points used to make the spline graph or predictions using terms
sx <- predict(gam_model,type='terms')
dim(sx)
summary(sx)
xframe <- cbind(train,sx=sx[,1])
xframe
ggplot(xframe,aes(x=x))+
geom_point(aes(y=y),alpha=0.4,color='blue')+
geom_smooth(aes(y=sx))+
ylim(-5,6)
ggplot(xframe,aes(x=x))+
geom_point(aes(y=y),alpha=0.4,color='blue')+
geom_smooth(aes(y=sx),color='green')+
ylim(-5,6)
x=rnorm(10)
rnorm(10)
runif(10)
load('NatalBirthData.rData')
load('NatalBirthData.rData')
str(sdata)
train <- sdata[sdata$ORIGRANDGROUP<=5,]
test <- sdata[sdata$ORIGRANDGROUP>5,]
form.lin <- as.formula("DBWT ~ PWGT + WTGAIN + MAGER + UPREVIS")
linmodel <- lm(form.lin, data=train)
summary(linmodel)
form.glin <- as.formula("DBWT ~ s(PWGT) + s(WTGAIN) +s(MAGER) + s(UPREVIS)")
g_model <- gam(form.glin, data=train)
g_model$converged
summary(g_model)
terms <- predict(g_model, type="terms")
tframe <-cbind(DBWT = train$DBWT, as.data.frame(terms))
colnames(tframe) <- gsub('[()]', '', colnames(tframe))
pframe <- cbind(tframe, train[,c("PWGT", "WTGAIN", "MAGER", "UPREVIS")])
p1 <- ggplot(pframe, aes(x=PWGT)) +
geom_point(aes(y=scale(sPWGT, scale=F))) +
geom_smooth(aes(y=scale(DBWT, scale=F)))
ggplot(pframe, aes(x=PWGT)) +
geom_point(aes(y=scale(sPWGT, scale=F))) +
geom_smooth(aes(y=scale(DBWT, scale=F)))
ggplot(pframe, aes(x=PWGT)) +
geom_point(aes(y=scale(sPWGT, scale=F))) +
geom_smooth(aes(y=scale(DBWT, scale=F)))  +
geom_point(aes(y=scale(MAGER, scale=F))) +
geom_smooth(aes(y=scale(DBWT, scale=F)))
pred.lin <- predict(l_model, newdata=test)
pred.glin <- predict(g_model, newdata=test)
cor(pred.lin, test$DBWT)^2
l_model <- lm(form.lin, data=train)
pred.lin <- predict(l_model, newdata=test)
pred.glin <- predict(g_model, newdata=test)
cor(pred.lin, test$DBWT)^2
cor(pred.glin, test$DBWT)^2
ggplot(pframe, aes(x=PWGT)) +
geom_point(aes(y=scale(sPWGT, scale=F))) +
geom_smooth(aes(y=scale(DBWT, scale=F)))  +
geom_point(aes(y=scale(sMAGER, scale=F))) +
geom_smooth(aes(y=scale(DBWT, scale=F)))
ggplot(pframe, aes(x=PWGT)) +
geom_point(aes(y=scale(sPWGT, scale=F))) +
geom_smooth(aes(y=scale(DBWT, scale=F)))  +
geom_point(aes(x=MAGER,y=scale(sMAGER, scale=F))) +
geom_smooth(aes(y=scale(DBWT, scale=F)))
source('~/R/Data-science-fundamentals/GAMs.R', echo=TRUE)
source('~/R/Data-science-fundamentals/GAMs.R', echo=TRUE)
source('~/R/Data-science-fundamentals/GAMs.R', echo=TRUE)
source('~/R/Data-science-fundamentals/GAMs.R', echo=TRUE)
source('~/R/Data-science-fundamentals/GAMs.R', echo=TRUE)
source('~/R/Data-science-fundamentals/GAMs.R', echo=TRUE)
source('~/R/Data-science-fundamentals/GAMs.R', echo=TRUE)
source('~/R/Data-science-fundamentals/GAMs.R', echo=TRUE)
source('~/R/Data-science-fundamentals/GAMs.R', echo=TRUE)
source('~/R/Data-science-fundamentals/GAMs.R', echo=TRUE)
source('~/R/Data-science-fundamentals/GAMs.R', echo=TRUE)
source('~/R/Data-science-fundamentals/GAMs.R', echo=TRUE)
source('~/R/Data-science-fundamentals/GAMs.R', echo=TRUE)
source('~/R/Data-science-fundamentals/GAMs.R', echo=TRUE)
# Logistic Regression using GAM
form <- as.formula("DBWT < 2000 ~ PWGT + WTGAIN + MAGER + UPREVIS")
logmod <- glm(form, data=train, family=binomial(link="logit"))
summary(logmod)
form2 <- as.formula("DBWT<2000~s(PWGT)+s(WTGAIN)+s(MAGER)+s(UPREVIS)")
glogmod <- gam(form2, data=train, family=binomial(link="logit"))
glogmod$converged
summary(glogmod)
library(mgcv)
library(ggplot2)
load(psub.rData)
load('psub.rData')
dtrain <- subset(psub,ORIGRANDGROUP >= 500)
dim(dtrain)
str(psub)
dtrain <- subset(psub,ORIGRANDGROUP >= 500)
dim(dtrain)
dtest <- subset(psub,ORIGRANDGROUP < 500)
m1 <- step(
lm(log(PINCP,base=10) ~ AGEP + SEX + COW + SCHL,data=dtrain),
direction='both')
rmse <- function(y, f) { sqrt(mean( (y-f)^2 )) }
print(rmse(log(dtest$PINCP,base=10),predict(m1,newdata=dtest)))
phi <- function(x){
x <- as.numeric(x)
c(x,x*x,combn(x,2,FUN=prod))
}
phinamems <- function(n){
c(n,paste(n,n,sep = ':'),
combn(n,2,FUN = function(x){
paste(x,collapse = ':')
}))
}
modelMatrix <- model.matrix(~ 0 + AGEP + SEX + COW + SCHL,psub)
modelMatrix
str(modelMatrix)
colnames(modelMatrix) <- gsub('[^a-zA-Z0-9]+','_',
colnames(modelMatrix))
colnames(modelMatrix)
modelMatrix <- model.matrix(~ 0 + AGEP + SEX + COW + SCHL,psub)
colnames(modelMatrix)
colnames(modelMatrix)
colnames(modelMatrix) <- gsub('[^a-zA-Z0-9]+','_', colnames(modelMatrix))
colnames(modelMatrix)
pM <- t(apply(modelMatrix,1,phi))
pM
vars <- phiNames(colnames(modelMatrix))
phiNames <- function(n){
c(n,paste(n,n,sep = ':'),
combn(n,2,FUN = function(x){
paste(x,collapse = ':')
}))
}
vars <- phiNames(colnames(modelMatrix))
vars <- gsub('[^a-zA-Z0-9]+','_',vars)
vars
colnames(pM) <- vars
pM <- as.data.frame(pM)
pM
str(pM)
pM <- t(apply(modelMatrix,1,phi))
vars <- phiNames(colnames(modelMatrix))
vars <- gsub('[^a-zA-Z0-9]+','_',vars)
colnames(pM) <- vars
pM <- as.data.frame(pM)
str(pM)
pM$PINCP <- psub$PINCP
pM$ORIGRANDGROUP <- psub$ORIGRANDGROUP
pMtrain <- subset(pM,ORIGRANDGROUP >= 500)
pMtest <- subset(pM,ORIGRANDGROUP < 500)
formulaStr2 <- paste('log(PINCP,base=10)',
paste(vars,collapse=' + '),sep=' ~ ')
m2 <- lm(as.formula(formulaStr2),data=pMtrain)
coef2 <- summary(m2)$coefficients
interestingVars <- setdiff(rownames(coef2)[coef2[,'Pr(>|t|)']<0.01],'(Intercept)')
interestingVars <- union(colnames(modelMatrix),interestingVars)
formulaStr3 <- paste('log(PINCP,base=10)',
paste(interestingVars,collapse=' + '), sep=' ~ ')
m3 <- step(lm(as.formula(formulaStr3),data=pMtrain),direction='both')
print(rmse(log(pMtest$PINCP,base=10),predict(m3,newdata=pMtest)))
print(summary(m3))
library(kernlab)
library(ggplot2)
data('spirals')
sc <- specc(spirals,centers=2)
str(sc)
as.factor(sc)
s <- data.frame(x=spirals[,1],y=spirals[,2],
class=as.factor(sc))
str(s)
str(spirals)
sc <- specc(spirals,centers=4)
as.factor(sc)
sc <- specc(spirals,centers=2)
str(sc)
s <- data.frame(x=spirals[,1],y=spirals[,2],
class=as.factor(sc))
str(s)
ggplot(data=s) +
geom_text(aes(x=x,y=y, label=class,color=class)) +
coord_fixed() + theme_bw() + theme(legend.position='none')
ggplot(data=s) +
geom_text(aes(x=x,y=y, label=class,color=class))# +
ggplot(data=s) +
geom_text(aes(x=x,y=y, label=class,color=class)) +
coord_fixed()
ggplot(data=s) +
geom_text(aes(x=x,y=y, label=class,color=class)) +
coord_fixed() + theme_bw()
ggplot(data=s) +
geom_text(aes(x=x,y=y, label=class,color=class)) +
coord_fixed() + theme(legend.position='none')
ggplot(data=s) +
geom_text(aes(x=x,y=y, label=class,color=class)) +
coord_fixed() + theme_bw() + theme(legend.position='none')
ggplot() +geom_text(data=sTest,aes(x=x,y=y,label=predSVMV),size=12) +
geom_text(data=s,aes(x=x,y=y,label=class,color=class),alpha=0.7) +
coord_fixed() + theme_bw() + theme(legend.position='none')
set.seed(123)
s$group <- sample.int(100,size=dim(s)[[1]],replace=T)
sTrain <- subset(s,group>10)
sTest <- subset(s,group<=10)
mSVMV <- ksvm(class~x+y,data=sTrain,kernel='vanilladot')
sTest$predSVMV <- predict(mSVMV,newdata=sTest,type='response')
ggplot() +geom_text(data=sTest,aes(x=x,y=y,label=predSVMV),size=12) +
geom_text(data=s,aes(x=x,y=y,label=class,color=class),alpha=0.7) +
coord_fixed() + theme_bw() + theme(legend.position='none')
spamD <- read.table('spamD.txt',header=T,sep='\t')
# Model using rbf or gaussian kernel
mSVMG <- ksvm(class~x+y,data=sTrain,kernel='rbfdot')
sTest$predSVMG <- predict(mSVMG,newdata=sTest,type='response')
ggplot() +
geom_text(data=sTest,aes(x=x,y=y,label=predSVMG),size=12) +
geom_text(data=s,aes(x=x,y=y,label=class,color=class),alpha=0.7) +
coord_fixed() + theme_bw() + theme(legend.position='none')
# Model using rbf or gaussian kernel
mSVMG <- ksvm(class~x+y,data=sTrain,kernel='rbfdot')
sTest$predSVMG <- predict(mSVMG,newdata=sTest,type='response')
ggplot() +
geom_text(data=sTest,aes(x=x,y=y,label=predSVMG),size=12) +
geom_text(data=s,aes(x=x,y=y,label=class,color=class),alpha=0.7) +
coord_fixed() + theme_bw() + theme(legend.position='none')
# Using spam data
spamD <- read.table('spamD.txt',header=T,sep='\t')
str(spamD)
spamTrain <- subset(spamD,spamD$rgroup>=10)
spamTest <- subset(spamD,spamD$rgroup<10)
spamVars <- setdiff(colnames(spamD),list('rgroup','spam'))
spamFormula <- as.formula(paste('spam=="spam"',
paste(spamVars,collapse=' + '),sep=' ~ '))
spamModel <- glm(spamFormula,family=binomial(link='logit'),data=spamTrain)
spamTest$pred <- predict(spamModel,newdata=spamTest,type='response')
table(y=spam,glPred=pred>=0.5)
print(with(spamTest,table(y=spam,glPred=pred>=0.5)))
# Using SVM
spamFormulaV <- as.formula(paste('spam', paste(spamVars,collapse=' + '),sep=' ~ '))
svmM <- ksvm(spamFormulaV,data=spamTrain,
svmM <- ksvm(spamFormulaV,data=spamTrain,
kernel='rbfdot', C=10, prob.model=T,cross=5,
class.weights=c('spam'=1,'non-spam'=10))
print(svmM)
spamTest$svmPred <- predict(svmM,newdata=spamTest,type='response')
print(with(spamTest,table(y=spam,svmPred=svmPred)))
library(mgcv)
library(ggplot2)
load('psub.rData')
str(psub)
table(psu)
table(psub)
fix(psub)
psub
library(randomForest)
library(rpart)
spamD <- read.table('spamD.txt',sep='\t',header=T)
str(spamD)
table(spamD)
spamD
raw=read.csv('spam.csv',sep=',')
inspect(spamD)
show(spamD)
view(spamD)
View(spamD)
install.packages("Rook")
library(randomForest)
load('thRS500.Rdata')
str(buzztrain)
summary(buzztrain)
varslist
numericPositions = sapply(buzztrain[varslist], is.numeric)
args(varslist)
arg[(varslist]
arg[varslist]
s <- Rhttpd$new()
s$add(name='modelFn', app=modelFn)
s <- Rhttpd$new()
s$add(name='modelFn', app=modelFn)
library(Rook)
library(randomForest)
load('thRS500.Rdata')
str(buzztrain)
summary(buzztrain)
varslist
numericPositions = sapply(buzztrain[varslist], is.numeric)
model_fn <- function(env){
errors <- c()
warnings <- c()
val <- c()
row <- c()
tryCatch(
{
arg <- Multipart$parse(env)
row <- as.list(arg[varslist])
names(row) <- varslist
row[numericPositions] <- as.numeric(row[numericPositions])
frame <- data.frame(row)
val <- predict(fmodel,newdata = row)
}
warning <- function(w){message(w)
warnings <- c(warnings, as.character(w))},
error <- function(e){ message(e)
errors <- c(errors, as.character(e))}
)
body <- paste(
'val=',val,'\n',
'nerrors=',length(errors),'\n',
'nwarnings=',length(warnings),'\n',
'query=',env$QUERY_STRING,'\n',
'errors=',paste(errors,collapse=' '),'\n',
'warnings=',paste(warnings,collapse=' '),'\n',
'data row','\n',
paste(capture.output(print(row)),collapse='\n'),'\n',
sep='')
list(
status=ifelse(length(errors)<=0,200L,400L),
headers=list('Content-Type' = 'text/text'),
body=body
)
}
model_fn <- function(env){
errors <- c()
warnings <- c()
val <- c()
row <- c()
tryCatch(
{
arg <- Multipart$parse(env)
row <- as.list(arg[varslist])
names(row) <- varslist
row[numericPositions] <- as.numeric(row[numericPositions])
frame <- data.frame(row)
val <- predict(fmodel,newdata = row)
}
warning =function(w){message(w)
warnings <- c(warnings, as.character(w))},
error = function(e){ message(e)
errors <- c(errors, as.character(e))}
)
body <- paste(
'val=',val,'\n',
'nerrors=',length(errors),'\n',
'nwarnings=',length(warnings),'\n',
'query=',env$QUERY_STRING,'\n',
'errors=',paste(errors,collapse=' '),'\n',
'warnings=',paste(warnings,collapse=' '),'\n',
'data row','\n',
paste(capture.output(print(row)),collapse='\n'),'\n',
sep='')
list(
status=ifelse(length(errors)<=0,200L,400L),
headers=list('Content-Type' = 'text/text'),
body=body
)
}
model_fn <- function(env){
errors <- c()
warnings <- c()
val <- c()
row <- c()
tryCatch(
{
arg <- Multipart$parse(env)
row <- as.list(arg[varslist])
names(row) <- varslist
row[numericPositions] <- as.numeric(row[numericPositions])
frame <- data.frame(row)
val <- predict(fmodel,newdata = row)
},
warning =function(w){message(w)
warnings <- c(warnings, as.character(w))},
error = function(e){ message(e)
errors <- c(errors, as.character(e))}
)
body <- paste(
'val=',val,'\n',
'nerrors=',length(errors),'\n',
'nwarnings=',length(warnings),'\n',
'query=',env$QUERY_STRING,'\n',
'errors=',paste(errors,collapse=' '),'\n',
'warnings=',paste(warnings,collapse=' '),'\n',
'data row','\n',
paste(capture.output(print(row)),collapse='\n'),'\n',
sep='')
list(
status=ifelse(length(errors)<=0,200L,400L),
headers=list('Content-Type' = 'text/text'),
body=body
)
}
s <- Rhttpd$new()
s$add(name='modelFn', app=modelFn)
s$start()
print(s)
s$add(name='modelFn', app=modelFn)
s$start()
print(s)
rowAsForm <- function(url,row) {
s <- paste('<HTML><HEAD></HEAD><BODY><FORM action="',url,
'" enctype="multipart/form-data" method="POST">\n',sep='')
s <- paste(s,'<input type="submit" value="Send"/>',sep='\n')
qpaste <- function(a,b) {
paste('<p> ',a,' <input type="text" name="',a,
'" value="',b,'"/> </p>',sep='') }
assignments <- mapply('qpaste',varslist,as.list(row)[varslist])
s <- paste(s,paste(assignments,collapse='\n'),sep='\n')
s <- paste(s,'</FORM></BODY></HTML>',sep='\n')
s
}
url <- 'http://127.0.0.1:20714/custom/modelFn'
cat(rowAsForm(url,buzztest[7,]),file='buzztest7.html')
cat(rowAsForm(url,buzztest[7,]),file='buzztest7.html')
extractTrees <- function(rfModel) {
ei <- function(i) {
ti <- getTree(rfModel,k=i,labelVar=T)
ti$nodeid <- 1:dim(ti)[[1]]
ti$treeid <- i
ti
}
nTrees <- rfModel$ntree
do.call('rbind',sapply(1:nTrees,ei,simplify=F))
}
write.table(extractTrees(fmodel),
file='rfmodel.tsv',row.names=F,sep='\t',quote=F)
View(extractTrees)
s <- Rhttpd$new()
s$add(name='modelFn', app=modelFn)
s$start()
