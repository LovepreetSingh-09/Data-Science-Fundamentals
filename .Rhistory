makepred(outcol,varC,appC)
}
for (v in numvars){
pi <- paste('pred',v,sep='')
dtrain[,pi] <- mkPredN(dtrain[,outcome],dtrain[,v],dtrain[,v])
dtest[,pi] <- mkPredN(dtrain[,outcome],dtrain[,v],dtest[,v])
dcal[,pi] <- mkPredN(dtrain[,outcome],dtrain[,v],dcal[,v])
aucTrain <- calcAUC(dtrain[,pi],dtrain[,outcome])
if(aucTrain>=0.55) {
aucCal <- calcAUC(dCal[,pi],dCal[,outcome])
print(sprintf("%s, trainAUC: %4.3f calibrationAUC: %4.3f", pi,aucTrain,aucCal))
}
}
for (v in numvars){
pi <- paste('pred',v,sep='')
dtrain[,pi] <- mkPredN(dtrain[,outcome],dtrain[,v],dtrain[,v])
dtest[,pi] <- mkPredN(dtrain[,outcome],dtrain[,v],dtest[,v])
dcal[,pi] <- mkPredN(dtrain[,outcome],dtrain[,v],dcal[,v])
aucTrain <- calcAUC(dtrain[,pi],dtrain[,outcome])
}
makepred <- function(outcol,varcol,appcol){
pPos <- sum(outcol==pos)/length(outcol)
natab <- table(as.factor(outcol[is.na(varcol)]))
pPoswna=(natab/sum(natab))[pos]
vtab <- table(as.factor(outcol),varcol)
pPoswv <- vtab[pos, ]/colSums(vtab)
pred <- pPoswv[appcol]
pred[is.na(appcol)]=pPoswna
pred[is.na(pred)] <- pPos
pred
}
for (v in catvars) {
pi <- paste('pred',v,sep='')
dtrain[,pi] <- makepred(dtrain[,outcome],dtrain[,v],dtrain[,v])
dcal[,pi] <- makepred(dtrain[,outcome],dtrain[,v],dcal[,v])
dtest[,pi] <- makepred(dtrain[,outcome],dtrain[,v],dtest[,v])
}
calcAUC <- function(predcol,outcol){
perf <- performance(prediction(predcol,outcol==pos),measure = 'auc')
as.numeric(perf@y.values)
}
for (v in catvars){
pi <- paste('pred',v,sep='')
auctrain <- calcAUC(dtrain[,pi],dtrain[,outcome])
if (auctrain>0.8){
auccal <- calcAUC(dcal[,pi],dcal[,outcome])
print(sprintf('%s trainAUC: %4.3f  CalibrtionAUC: %4.3f',pi,auctrain,auccal))
}
}
mkPredN <- function(varcol,outcol,appcol){
cuts <- unique(as.numeric(quantile(varcol,probs=seq(0,1,0.1),na.rm = T)))
varC <- cut(varcol,cuts)
appC <- cut(appcol,cuts)
makepred(outcol,varC,appC)
}
for (v in numvars){
pi <- paste('pred',v,sep='')
dtrain[,pi] <- mkPredN(dtrain[,outcome],dtrain[,v],dtrain[,v])
dtest[,pi] <- mkPredN(dtrain[,outcome],dtrain[,v],dtest[,v])
dcal[,pi] <- mkPredN(dtrain[,outcome],dtrain[,v],dcal[,v])
aucTrain <- calcAUC(dtrain[,pi],dtrain[,outcome])
if(aucTrain>=0.55) {
aucCal <- calcAUC(dCal[,pi],dCal[,outcome])
print(sprintf("%s, trainAUC: %4.3f calibrationAUC: %4.3f", pi,aucTrain,aucCal))
}
}
length(dcal[,outcome])
dcal[,outcome]==pos
sum(dcal[,outcome]==pos/length(dcal[,outcome]))
baseRateCheck <-logLikelyhood(dcal[,outcome],sum(dcal[,outcome]==pos/length(dcal[,outcome])))
logLikelyhood <- function(outcol,predcol){
sum(ifelse(outcol==pos,log2(predcol),log2(1-predcol)))
}
selVars <- c()
minStep <- 5
baseRateCheck <-logLikelyhood(dcal[,outcome],sum(dcal[,outcome]==pos/length(dcal[,outcome])))
sum(as.numeric(dcal[,outcome]==pos)/length(dcal[,outcome]))
baseRateCheck <-logLikelyhood(dcal[,outcome],sum(as.numeric(dcal[,outcome]==pos)/length(dcal[,outcome])))
for(v in catvars) {
pi <- paste('pred',v,sep='')
liCheck <- 2*((logLikelyhood(dcal[,outcome],dcal[,pi]) -
baseRateCheck))
if(liCheck>minStep) {
print(sprintf("%s, calibrationScore: %g",
pi,liCheck))
selVars <- c(selVars,pi)
}
}
makepred <- function(outcol,varcol,appcol){
pPos <- sum(outcol==pos)/length(outcol)
natab <- table(as.factor(outcol[is.na(varcol)]))
pPoswna=(natab/sum(natab))[pos]
vtab <- table(as.factor(outcol),varcol)
pPoswv <- (vtab[pos, ])/(colSums(vtab))
pred <- pPoswv[appcol]
pred[is.na(appcol)]=pPoswna
pred[is.na(pred)] <- pPos
pred
}
for (v in catvars) {
pi <- paste('pred',v,sep='')
dtrain[,pi] <- makepred(dtrain[,outcome],dtrain[,v],dtrain[,v])
dcal[,pi] <- makepred(dtrain[,outcome],dtrain[,v],dcal[,v])
dtest[,pi] <- makepred(dtrain[,outcome],dtrain[,v],dtest[,v])
}
calcAUC <- function(predcol,outcol){
perf <- performance(prediction(predcol,outcol==pos),measure = 'auc')
as.numeric(perf@y.values)
}
for (v in catvars){
pi <- paste('pred',v,sep='')
auctrain <- calcAUC(dtrain[,pi],dtrain[,outcome])
if (auctrain>0.8){
auccal <- calcAUC(dcal[,pi],dcal[,outcome])
print(sprintf('%s trainAUC: %4.3f  CalibrtionAUC: %4.3f',pi,auctrain,auccal))
}
}
mkPredN <- function(varcol,outcol,appcol){
cuts <- unique(as.numeric(quantile(varcol,probs=seq(0,1,0.1),na.rm = T)))
varC <- cut(varcol,cuts)
appC <- cut(appcol,cuts)
makepred(outcol,varC,appC)
}
for (v in numvars){
pi <- paste('pred',v,sep='')
dtrain[,pi] <- mkPredN(dtrain[,outcome],dtrain[,v],dtrain[,v])
dtest[,pi] <- mkPredN(dtrain[,outcome],dtrain[,v],dtest[,v])
dcal[,pi] <- mkPredN(dtrain[,outcome],dtrain[,v],dcal[,v])
aucTrain <- calcAUC(dtrain[,pi],dtrain[,outcome])
if(aucTrain>=0.55) {
aucCal <- calcAUC(dcal[,pi],dcal[,outcome])
print(sprintf("%s, trainAUC: %4.3f calibrationAUC: %4.3f", pi,aucTrain,aucCal))
}
}
for(v in numericVars) {
pi <- paste('pred',v,sep='')
liCheck <- 2*((logLikelyhood(dCal[,outcome],dCal[,pi]) -
baseRateCheck) - 1)
if(liCheck>=minStep) {
print(sprintf("%s, calibrationScore: %g",
pi,liCheck))
selVars <- c(selVars,pi)
}
}
for(v in numVars) {
pi <- paste('pred',v,sep='')
liCheck <- 2*((logLikelyhood(dCal[,outcome],dCal[,pi]) -
baseRateCheck) - 1)
if(liCheck>=minStep) {
print(sprintf("%s, calibrationScore: %g",
pi,liCheck))
selVars <- c(selVars,pi)
}
}
for(v in numvars) {
pi <- paste('pred',v,sep='')
liCheck <- 2*((logLikelyhood(dCal[,outcome],dCal[,pi]) -
baseRateCheck) - 1)
if(liCheck>=minStep) {
print(sprintf("%s, calibrationScore: %g",
pi,liCheck))
selVars <- c(selVars,pi)
}
}
for(v in numvars) {
pi <- paste('pred',v,sep='')
liCheck <- 2*((logLikelyhood(dcal[,outcome],dcal[,pi]) -baseRateCheck) - 1)
if(liCheck>=minStep) {
print(sprintf("%s, calibrationScore: %g", pi,liCheck))
selVars <- c(selVars,pi)
}
}
library(rpart)
f <- paste(outcome,'>0~',paste(selVars,collapse = '+'),sep='')
f
tmodel <- rpart(f,data=dtrain,rpart.control(minsplit = 1000,minbucket = 1000,cp=0.001,maxdepth = 5))
f <- paste(outcome,'>0 ~ ',paste(selVars,collapse = '+'),sep='')
f
tmodel <- rpart(f,data=dtrain,rpart.control(minsplit = 1000,minbucket = 1000,cp=0.001,maxdepth = 5))
tmodel <- rpart(f,data=dtrain)
tmodel <- rpart(f,data=dtrain,rpart.control(minsplit = 1000,minbucket = 1000,cp=0.001,maxdepth = 5))
tmodel <- rpart(f,data=dtrain,control=rpart.control(minsplit = 1000,minbucket = 1000,cp=0.001,maxdepth = 5))
tmodel
print(calcAUC(predict(tmodel,dtrain),dtrain[,outcome]))
print(calcAUC(predict(tmodel,dtest),dtrain[,outcome]))
print(calcAUC(predict(tmodel,dtest),dtest[,outcome]))
print(calcAUC(predict(tmodel,dcal),dcal[,outcome]))
par(cex=0.7)
plot(tmodel)
text(tmodel)
nK <- 200
knnTrain <- dTrain[,selVars]
knnTrain <- dtrain[,selVars]
knnCl <- dtrain[,outcome]==pos
knnPred <- function(df) {
knnDecision <- knn(knnTrain,df,knnCl,k=nK,prob=T)
ifelse(knnDecision==TRUE,
attributes(knnDecision)$prob,
1-(attributes(knnDecision)$prob))
}
print(calcAUC(knnPred(dtrain[,selVars]),dtrain[,outcome]))
library(class)
print(calcAUC(knnPred(dtrain[,selVars]),dtrain[,outcome]))
print(calcAUC(knnPred(dcal[,selVars]),dcal[,outcome]))
print(calcAUC(knnPred(dtest[,selVars]),dtest[,outcome]))
dcal$kpred <- knnPred(dcal[,selVars])
ggplot(data=dcal) +
geom_density(aes(x=kpred, color=as.factor(churn),linetype=as.factor(churn)))
plotROC <- function(predcol,outcol) {
perf <- performance(prediction(predcol,outcol==pos),'tpr','fpr')
pf <- data.frame(
FalsePositiveRate=perf@x.values[[1]],
TruePositiveRate=perf@y.values[[1]])
ggplot() +
geom_line(data=pf,aes(x=FalsePositiveRate,y=TruePositiveRate)) +
geom_line(aes(x=c(0,1),y=c(0,1)))
}
print(plotROC(knnPred(dtest[,selVars]),dtest[,outcome]))
source('~/R/Data-science-fundamentals/modelling_methods.R')
library('e1071')
library(e1071)
lVars <- c(catVars,numericVars)
lVars <- c(catvars,numvars)
ff <- paste('as.factor(',outcome,'>0) ~ ', paste(lVars,collapse=' + '),sep='')
ff
nbmodel <- naiveBayes(as.formula(ff),data=dtrain)
dtrain$nbpred <- predict(nbmodel,newdata=dtrain,type='raw')[,'TRUE']
load("C:/Users/user/Downloads/psub.RData")
psub
library(MASS)
load('psub.RData')
str(psub)
dtrain <- subset(psub,ORIGRANDGROUP>=500)
dtest <- subset(psub,ORIGRANDGROUP<500)
model <- lm(log10(PINCP)~AGEP+SEX+COW+SCHL, data=dtrain)
summary(model)
dtrain$predLogPINCP <- predict(model,data=dtrain)
dtest$predLogPINCP <- predict(model,dtest)
dim(psub)
dim(dtest)
ggplot(dtest,aes(x=LogPINCP,y=PINCP))+
geom_line(alpha=0.2)+
geom_smooth()
library(ggplot2)
ggplot(dtest,aes(x=LogPINCP,y=PINCP))+
geom_line(alpha=0.2)+
geom_smooth()
ggplot(dtest,aes(x=predLogPINCP,y=PINCP))+
geom_line(alpha=0.2)+
geom_smooth()
ggplot(dtest,aes(x=predLogPINCP,y=PINCP))+
geom_point(alpha=0.2)+
geom_smooth()
ggplot(dtest,aes(x=predLogPINCP,y=PINCP))+
geom_point(alpha=0.2)+
geom_smooth()+
geom_line()
ggplot(dtest,aes(x=predLogPINCP,y=PINCP))+
geom_point(alpha=0.2)+
geom_smooth()+
geom_line(aes(x=predLogPINCP,y=log10(PINCP)))
ggplot(dtest,aes(x=predLogPINCP,y=PINCP))+
geom_point(alpha=0.2)+
geom_smooth(color='black')+
geom_line(aes(x=predLogPINCP,y=log10(PINCP)),linetype=2,color='blue')
ggplot(dtest,aes(x=predLogPINCP,y=log(PINCP)))+
geom_point(alpha=0.2)+
geom_smooth(color='black')+
geom_line(aes(x=predLogPINCP,y=log10(PINCP)),linetype=2,color='blue')
ggplot(dtest,aes(x=predLogPINCP,y=log10(PINCP)))+
geom_point(alpha=0.2)+
geom_smooth(color='black')+
geom_line(aes(x=predLogPINCP,y=log10(PINCP)),linetype=2,color='blue')
ggplot(dtest,aes(x=predLogPINCP,y=log10(PINCP)))+
geom_point(alpha=0.2)+
geom_smooth(color='black')+
geom_line(aes(x=PINCP,y=log10(PINCP)),linetype=2,color='blue')
ggplot(dtest,aes(x=predLogPINCP,y=log10(PINCP)))+
geom_point(alpha=0.2)+
geom_smooth(color='black')+
geom_line(aes(x=log10(PINCP),y=log10(PINCP)),linetype=2,color='blue')
ggplot(dtest,aes(x=predLogPINCP,y=log10(PINCP)))+
geom_point(alpha=0.2)+
geom_smooth(color='black')+
geom_line(aes(x=log10(PINCP),y=log10(PINCP)),linetype=2,color='blue')+
scale_x_continuous(limits = c(4,5.5))+
scale_y_continuous(limits = c(4,5.5))
ggplot(dtest,aes(x=predLogPINCP,y=log10(PINCP)))+
geom_point(alpha=0.2)+
geom_smooth(color='black')+
geom_line(aes(x=log10(PINCP),y=log10(PINCP)),linetype=2,color='blue')+
scale_x_continuous(limits = c(4.2,5))+
scale_y_continuous(limits = c(4,5.5))
ggplot(dtest,aes(x=predLogPINCP,y=(predLogPINCP-log10(PINCP))))+
geom_point()
ggplot(dtest,aes(x=predLogPINCP,y=(predLogPINCP-log10(PINCP))))+
geom_point()+
geom_smooth()
rsq <- function(y,f){
1-(sum((y-f)^2)/sum((y-mean)^2))
}
train_rsq <- rsq(log10(dtrain$PINCP),predict(model,dtrain))
1-(sum((y-f)^2)/sum((y-mean(y))^2))
rsq <- function(y,f){
1-(sum((y-f)^2)/sum((y-mean(y))^2))
}
train_rsq <- rsq(log10(dtrain$PINCP),predict(model,dtrain))
train_rsq
rsq(log10(dtest$PINCP),predict(model,dtest))
rsq(log10(dcal$PINCP),predict(model,dcal))
rmse <- function(y,f){
sqrt(mean((y-f)^2))
}
rmse(log10(dtrain$PINCP),predict(model,dtrain))
rmse(log10(dtest$PINCP),predict(model,dtest))
summary(model)
summary(log10(dtrain$PINCP)-predict(model,dtrain))
summary(log10(dtest$PINCP)-predict(model,dtest))
DOF <- dim(dtrian)[[1]]-coefficients(model)
DOF <- dim(dtrain)[[1]]-coefficients(model)
DOF
dim(coefficients(model))
DOF <- dim(dtrain)[[1]]-dim(summary(model)$coefficient)
DOF
dim(summary(model)$coefficient)
DOF <- dim(dtrain)[[1]]-dim(summary(model)$coefficient)[[1]]
DOF
summary(model)
residuals(model)
Residual_SE <- sqrt(sum(residuals(model)^2)/df)
Residual_SE <- sqrt(sum(residuals(model)^2)/DOF)
Residual_SE
library(ggplot2)
load("NatalRiskData.rData")
str(sdata)
dtrain=sdata[ORIGRANDGROUP<=5,]
dtrain=sdata[sdata$ORIGRANDGROUP<=5,]
dtest=sdata[sdata$ORIGRANDGROUP>5,]
str(dtrain)
complications <- c("ULD_MECO","ULD_PRECIP","ULD_BREECH")
riskfactors <- c("URF_DIAB", "URF_CHYPER", "URF_PHYPER", "URF_ECLAM")
y <- "atRisk"
x <- c("PWGT","UPREVIS", "CIG_REC","GESTREC3", "DPLURAL",complications,riskfactors)
fml <- paste(y,paste(x,collapse='+'),separate='~')
fml
fml <- paste(y,paste(x,collapse='+'),sep='~')
fml
model=glm(fml,dtrain,family = binomial(link='logit'))
dtrain$pred <- predict(model,dtrain)
dtest$pred <- predict(model,dtest,type = 'response')
# type='response' to get the values in the probabilities otherwise the values will be logits
dtrain$pred <- predict(model,dtrain,type='response')
dtest$pred <- predict(model,dtest,type = 'response')
ggplot(dtrain,aes(x=pred,color=atRisk,linetype=atRisk))+
geom_density()
library(grid)
library(ROCR)
predobj <- prediction(dtrain$pred,dtrain$atRisk)
predobj
prec.onj <- performance(predobj,measure='prec')
prec.obj <- performance(predobj,measure='prec')
prec.obj
rec.obj <- performance(predobj,measure = 'rec')
prec.obj@y.values
prec.obj@y.values[[1]]
(prec.obj@y.values)[[1]]
precision <- prec.obj@y.values[[1]]
recall <- rec.obj@y.vaues[[1]]
recall <- rec.obj@y.values[[1]]
rec.obj@y.values[[1]]
prec.x
prec.x <- prec.obj@x.values
prec.obj@x.values
prec.x <- prec.obj@x.values[[1]]
rocframe <- data.frame(threshold=prec.x,precision=precision,recall=recall)
str(rocframe)
pnull <- mean(as.numeric(dtrain$atRisk))
pnull
# enrichment vs threshold lot
p1 <- plot(rocframe,aes(x=threshold,y=precision/pnull))+
geom_line()
# enrichment vs threshold lot
p1 <- plot(rocframe,aes(x=threshold,y=precision/pnull))+
geom_line()+
coord_cartesian(xlim=c(0,0.05),ylim = c(0,10))
# enrichment vs threshold lot
p1 <- ggplot(rocframe,aes(x=threshold,y=precision/pnull))+
geom_line()+
coord_cartesian(xlim=c(0,0.05),ylim = c(0,10))
ggplot(rocframe,aes(x=threshold,y=precision/pnull))+
geom_line()+
coord_cartesian(xlim=c(0,0.05),ylim = c(0,10))
p2 <- ggplot(rocframe,aes(x=threshold,y=recall))+
geom_line()+
coord_cartesian(xlim=c(0,0.05))
ggplot(rocframe,aes(x=threshold,y=recall))+
geom_line()+
coord_cartesian(xlim=c(0,0.05))
nplot <- function(plist){
n=length(plist)
grid.newpage()
pushViewport(viewport(layout=grid.layout(n,1)))
vplayout <- function(x,y){
viewport(layout.pos.row = x,layout.pos.col = y)
}
for (i in 1:n){
print(plist[i],vp=vplayout(i,1))
}
}
pnull <- mean(as.numeric(dtrain$atRisk))
pnull
# enrichment vs threshold lot
p1 <- ggplot(rocframe,aes(x=threshold,y=precision/pnull))+
geom_line()+
coord_cartesian(xlim=c(0,0.05),ylim = c(0,10))
p2 <- ggplot(rocframe,aes(x=threshold,y=recall))+
geom_line()+
coord_cartesian(xlim=c(0,0.05))
nplot(list(p1,p2))
ctab.test <- table(dtrain$atRisk,dtrain$pred>0.2)
ctab
ctab.test
ctab.test <- table(dtrain$atRisk,dtrain$pred>0.02)
ctab.test
ctab.test <- table(True=dtrain$atRisk,Predicted=dtrain$pred>0.02)
ctab.test
ctab.test <- table(True=dtest$atRisk,Predicted=dtest$pred>0.02)
ctab.test
prec=ctab[2,2]/(ctab[1,2]+ctab[2,2])
prec
prec=ctab.test[2,2]/(ctab.test[1,2]+ctab.test[2,2])
prec
rec=ctab.test[2,2]/(ctab.test[2,2]+ctab.test[2,1])
rec
enrichment <- prec/pnul
enrichment <- prec/pnull
enrichment
summary(model)
coefficients(model)
sign(dtrain$atRisk-dtrain$pred)
sign(as.numeric(dtrain$atRisk)-dtrain$pred)
edev <- sign(as.numeric(dtrain$atRisk)-dtrain$pred)*
sqrt(-2*llcomponents((dtrain$atRisk,dtrain$pred)))
edev <- sign(as.numeric(dtrain$atRisk)-dtrain$pred)*
sqrt(-2*llcomponents(as.numeric(dtrain$atRisk),dtrain$pred))
llcomponents <- function(y,py){
y*log(py)+(1-y)*og(1-py)
}
edev <- sign(as.numeric(dtrain$atRisk)-dtrain$pred)*
sqrt(-2*llcomponents(as.numeric(dtrain$atRisk),dtrain$pred))
llcomponents <- function(y,py){
y*log(py)+(1-y)*log(1-py)
}
edev <- sign(as.numeric(dtrain$atRisk)-dtrain$pred)*
sqrt(-2*llcomponents(as.numeric(dtrain$atRisk),dtrain$pred))
summary(edev)
summary(model)
summary(edev)
residuals(model)
summary(residuals(model))
summary(edev)
null.dev <- -2*llcomponents(as.numeric(dtrain$atRisk),pnull)
null.dev
null.dev <- -2*sum(llcomponents(as.numeric(dtrain$atRisk),pnull))
null.dev
pnull
null.dev <- -2*sum(llcomponents(as.numeric(dtrain$atRisk),pnull))
null.dev
model.dev <- -2*sum(llcomponents(as.numeric(dtrain$atRisk),dtrain$pred))
model.dev
summary(edev)
summary(model)
model.dev
pnull.test <- mean(as.numeric(dtest$atRisk))
pnull.test
null.dev <- -2*sum(llcomponents(as.numeric(dtest$atRisk),dtest$pred))
null.dev
null.dev <- -2*sum(llcomponents(as.numeric(dtest$atRisk),pnull.test))
null.dev
model.dev <- -2*sum(llcomponents(as.numeric(dtest$atRisk),dtest$pred))
model.dev
DOF.null <- dim(dtest)[[1]]-1
DOF.null
DOF.null <- dim(dtrain)[[1]]-1
DOF.null
DOF.model <- dim(dtrain)[[1]]-dim(coefficients(model))[[1]]
DOF.model
dim(coefficients(model))
coefficients(model))
coefficients(model)
dim(coefficients(model))
length(coefficients(model))
DOF.model <- dim(dtrain)[[1]]-length(coefficients(model))
DOF.model
delDev <- null.dev-model.dev
delDev
delDOF <- DOF.null-DOF.model
delDev
delDOF
p <- pchisq(delDev,delDOF)
p
p <- pchisq(delDev,delDOF,lower.tail = F)
p
prsq <- function(x,y){
1-(x/y)
}
prsq(model.dev,null.dev)
AIC <- -sum(llcomponents(as.numeric(dtrain$atRisk),dtrain$pred))+2*length(coefficients(model))
AIC
sum(llcomponents(as.numeric(dtrain$atRisk),dtrain$pred))
AIC <- -2*sum(llcomponents(as.numeric(dtrain$atRisk),dtrain$pred))+2*length(coefficients(model))
AIC
